{"version":3,"sources":["webpack:///./src/utils/graphql-hooks/useAllPrograms.tsx","webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx"],"names":["useAllPrograms","data","React","allProgram","edges","map","node","img","playlist","filter","tune","index","youtube","useAllArtists","group","item","reduce","accum","curr","d","id","indexOf","removeMultiple","artist","fieldValue","tunes","kana","nation","slice","useAllCategories","sort","a","b","length"],"mappings":"mh/pBAMO,SAASA,IACd,IAAMC,EAAO,OAsCb,OAAOC,WAAc,WACnB,OAAOD,EAAKE,WAAWC,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAC3BC,EAAOD,EAAKE,SAASC,QAAO,SAACC,EAAMC,GAAP,OAA2B,IAAVA,GAAeD,EAAKE,SAA4B,KAAjBF,EAAKE,WAAgBP,KAAI,SAACK,GAAD,OAAUA,EAAKE,WAD9E,GAE7C,wBACKN,EADL,CAEEC,IAAKA,EAAM,0BAA0BA,EAA7B,SAA2C,YAGtD,I,00BCxCE,SAASM,IACd,IAAMZ,EAAO,OAoBb,OAAOC,WAAc,WACnB,OAAOD,EAAKE,WAAWW,MAAMT,KAAI,SAACU,GAChC,IAAMX,EA+BZ,SAAwBA,GACtB,OAAOA,EAAMY,QAAqB,SAACC,EAAOC,GACxC,OAAID,EAAMZ,KAAI,SAACc,GAAD,OAAOA,EAAEb,KAAKc,MAAIC,QAAQH,EAAKZ,KAAKc,KAAO,EAAUH,EACnE,YAAWA,GAAX,CAAkBC,MACjB,IAnCeI,CAAeP,EAAKX,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,wBACxCA,EADwC,CAE3CE,SAAUF,EAAKE,SAASC,QAAO,qBAAGc,SAAwBR,EAAKS,mBAE3DC,EAAQrB,EAAMY,QAAyB,SAACC,EAAOC,GAAR,kBAAqBD,GAArB,EAA+BC,EAAKV,aAAW,IALnD,EAMdiB,EANc,GAMhCC,EANgC,EAMhCA,KAAMC,EAN0B,EAM1BA,OACRpB,EAAOkB,EACXhB,QAAO,SAACC,GAAD,MAA2B,KAAjBA,EAAKE,WACtBP,KAAI,SAACK,GAAD,OAAUA,EAAKE,WACnBgB,OAAO,GAV+B,GAYzC,MAAO,CACLJ,WAAYT,EAAKS,WACjBE,OACAC,SACAvB,QACAqB,QACAlB,IAAKA,EAAM,0BAA0BA,EAA7B,SAA2C,WAGtD,I,0BCpDE,SAASsB,IACd,IAAM5B,EAAO,OAoBb,OAAOC,WAAc,WACnB,OAAOD,EAAKE,WAAWW,MAAMgB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE5B,MAAM6B,OAASF,EAAE3B,MAAM6B,YACpE,I","file":"fc440699f2c68757164b2379c4768af53a88f964-36a1fbde985e65662b05.js","sourcesContent":["import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { QueriedProgram, ArtistItem, CategoryItem, CornerItem, SelectorItem } from '../../types';\nimport { getProgramsContainsValue, filterPlaylist } from '../filterPlaylist';\nimport { AllProgramQuery, ProgramPlaylist } from '../../../graphql-types';\n\nexport function useAllPrograms(): QueriedProgram[] {\n  const data = useStaticQuery<AllProgramQuery>(graphql`\n    query AllProgram {\n      allProgram(sort: { fields: week, order: ASC }) {\n        edges {\n          node {\n            id\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            fields {\n              slug\n            }\n            guests\n            playlist {\n              artist\n              corner\n              id\n              indexInWeek\n              index\n              kana\n              label\n              name\n              nation\n              producer\n              selector\n              title\n              week\n              year\n              youtube\n            }\n            subtitle\n            week\n            year\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.edges.map(({ node }) => {\n      const [img] = node.playlist.filter((tune, index) => index !== 0 && tune.youtube && tune.youtube !== '').map((tune) => tune.youtube);\n      return {\n        ...node,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : null,\n      };\n    });\n  }, []);\n}\n/*\nexport function useAllTunes(): ProgramPlaylist[] {\n  //console.log('useAllTunes');\n  const programs = useAllPrograms();\n  return React.useMemo(() => {\n    //console.log('useAllTunes useMemo');\n    return programs.reduce((accum, curr) => [...accum, ...curr.playlist], []);\n  }, []);\n}\n*/\n/*\nexport function useAllArtists(): ArtistItem[] {\n  console.log('useAllArtists');\n  const allTunes = useAllTunes();\n  return React.useMemo(() => {\n    console.log('useAllArtists useMemo');\n    return allTunes.reduce<ArtistItem[]>((accum, curr) => {\n      const existedIndex = accum.map(d => d[0]).indexOf(curr.artist);\n      if (existedIndex < 0) {\n        return [...accum, [curr.artist, curr.kana, curr.nation, [curr]]];\n      } else {\n        accum[existedIndex][3].push(curr);\n        return accum;\n      }\n    }, []);\n  }, []);\n}\n*/\n/*\nexport function useCategories(): CategoryItem[] {\n  //console.log('useCategories');\n  const programs = useAllPrograms();\n  return React.useMemo(() => {\n    console.log('useCategories useMemo');\n    const categories: CategoryItem[] = [];\n    programs\n      .filter(program => program.categories.length)\n      .forEach(program => {\n        program.categories.forEach(category => {\n          const existedIndex = categories.map(d => d[0]).indexOf(category);\n          if (existedIndex < 0) {\n            categories.push([category, [program]]);\n          } else {\n            categories[existedIndex][1].push(program);\n          }\n        });\n      });\n    return categories.sort((a, b) => b[1].length - a[1].length);\n  }, []);\n}\n*/\n/*\nexport function useCorners(): CornerItem[] {\n  //console.log('useCorners');\n  const programs = useAllPrograms();\n  const allTunes = useAllTunes();\n  return React.useMemo(() => {\n    //console.log('useCorners useMemo');\n    return allTunes\n      .filter(tune => tune.corner !== '')\n      .reduce<CornerItem[]>((accum, curr) => {\n        const existedIndex = accum.map(d => d[0]).indexOf(curr.corner);\n        if (existedIndex < 0) {\n          const programsContainsCorner = getProgramsContainsValue(\n            'corner',\n            curr.corner\n          )(programs);\n\n          return [\n            ...accum,\n            [\n              curr.corner,\n              programsContainsCorner,\n              filterPlaylist('corner', curr.corner)(programsContainsCorner)\n                .length,\n            ],\n          ];\n        } else {\n          return accum;\n        }\n      }, [])\n      .sort((a, b) => b[2] - a[2]);\n  }, []);\n}\n*/\n/*\nexport function useSelectors(): SelectorItem[] {\n  //console.log('useSelectors');\n  const programs = useAllPrograms();\n  const allTunes = useAllTunes();\n  return React.useMemo(() => {\n    //console.log('useSelectors useMemo');\n    return allTunes\n      .filter(d => d.selector.length && d.selector !== '草野マサムネ')\n      .reduce<SelectorItem[]>((accum, curr) => {\n        const existedIndex = accum.map(d => d[0]).indexOf(curr.selector);\n        if (existedIndex < 0) {\n          const programsContainsSelector = getProgramsContainsValue(\n            'selector',\n            curr.selector\n          )(programs);\n          return [\n            ...accum,\n            [\n              curr.selector,\n              programsContainsSelector,\n              filterPlaylist(\n                'selector',\n                curr.selector\n              )(programsContainsSelector).length,\n            ],\n          ];\n        } else {\n          return accum;\n        }\n      }, [])\n      .sort((a, b) => b[2] - a[2]);\n  }, []);\n}\n*/\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllArtistsQuery, Program, ProgramPlaylist } from '../../../graphql-types';\n\nexport interface ArtistItem {\n  fieldValue: string;\n  kana?: string;\n  nation: string;\n  edges: ArtistEdge[];\n  tunes: ProgramPlaylist[];\n  img?: string;\n}\n\nexport function useAllArtists(): ArtistItem[] {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allProgram(sort: { fields: date, order: ASC }) {\n        group(field: playlist___artist) {\n          edges {\n            node {\n              id\n              playlist {\n                artist\n                kana\n                nation\n                youtube\n              }\n            }\n          }\n          fieldValue\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.map((item) => {\n      const edges = removeMultiple(item.edges).map(({ node }) => ({\n        ...node,\n        playlist: node.playlist.filter(({ artist }) => artist === item.fieldValue),\n      }));\n      const tunes = edges.reduce<ArtistPlaylist[]>((accum, curr) => [...accum, ...curr.playlist], []);\n      const [{ kana, nation }] = tunes;\n      const [img] = tunes\n        .filter((tune) => tune.youtube !== '')\n        .map((tune) => tune.youtube)\n        .slice(-1);\n\n      return {\n        fieldValue: item.fieldValue,\n        kana,\n        nation,\n        edges,\n        tunes,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : null,\n      };\n    });\n  }, []);\n}\n\ninterface ArtistEdge {\n  node: Pick<Program, 'id'> & {\n    playlist?: ArtistPlaylist[];\n  };\n}\n\ntype ArtistPlaylist = Pick<ProgramPlaylist, 'artist' | 'kana' | 'nation' | 'youtube'>;\n\nfunction removeMultiple(edges: ArtistEdge[]) {\n  return edges.reduce<ArtistEdge[]>((accum, curr) => {\n    if (accum.map((d) => d.node.id).indexOf(curr.node.id) >= 0) return accum;\n    return [...accum, curr];\n  }, []);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.edges.length - a.edges.length);\n  }, []);\n}\n"],"sourceRoot":""}