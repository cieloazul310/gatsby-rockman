{"version":3,"sources":["webpack:///../node_modules/@material-ui/core/esm/utils/createSvgIcon.js","webpack:///./src/utils/graphql-hooks/useAllSelectors.tsx"],"names":["createSvgIcon","path","displayName","Component","props","ref","createElement","muiName","memo","forwardRef","useAllSelectors","data","React","allProgram","group","filter","fieldValue","map","edges","reduce","accum","curr","d","node","id","indexOf","removeMultiple","playlist","tune","selector","sort","a","b","length"],"mappings":"2FAAA,mFAOe,SAASA,EAAcC,EAAMC,GAC1C,IAAIC,EAAY,SAAmBC,EAAOC,GACxC,OAAoB,IAAMC,cAAc,IAAS,YAAS,CACxDD,IAAKA,GACJD,GAAQH,IAUb,OADAE,EAAUI,QAAU,IAAQA,QACR,IAAMC,KAAmB,IAAMC,WAAWN,M,o6BCXzD,SAASO,IACd,IAAMC,EAAO,OAgCb,OAAOC,WAAc,WACnB,OAAOD,EAAKE,WAAWC,MACpBC,QAAO,SAACD,GAAD,MAAgC,WAArBA,EAAME,cACxBC,KAAI,SAACH,GAAU,MACRI,EAsBd,SAAwBA,GACtB,OAAOA,EAAMC,QAAe,SAACC,EAAOC,GAClC,OAAID,EAAMH,KAAI,SAACK,GAAD,OAAOA,EAAEC,KAAKC,MAAIC,QAAQJ,EAAKE,KAAKC,KAAO,EAAUJ,EACnE,YAAWA,GAAX,CAAkBC,MACjB,IA1BiBK,CAAeZ,EAAMI,OACnC,MAAO,CACLF,WAAU,UAAEF,EAAME,kBAAR,QAAsB,WAChCE,QACAS,SAAUT,EAAMC,QACd,SAACC,EAAOC,GAAR,OACEA,EAAKE,KAAKI,SAAV,YAAyBP,GAAzB,EAAmCC,EAAKE,KAAKI,SAASZ,QAAO,SAACa,GAAD,OAAUA,EAAKC,WAAaf,EAAME,gBAA/F,EAAkHI,KACpH,QAILU,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEL,SAASM,OAASF,EAAEJ,SAASM,QAAUD,EAAEd,MAAMe,OAASF,EAAEb,MAAMe,YACnF,CAACtB,M","file":"fcde4a6f4b323dda9a5db2def4a26f1dd590c792-1aaf0d7d5cf04d2d291a.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../SvgIcon';\n/**\n * Private module reserved for @material-ui/x packages.\n */\n\nexport default function createSvgIcon(path, displayName) {\n  var Component = function Component(props, ref) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      ref: ref\n    }, props), path);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));\n}","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllSelectorsQuery, Program, ProgramPlaylist } from '../../../graphql-types';\n\nexport interface CategoryItem {\n  fieldValue: string;\n  edges: Edge[];\n  playlist: Playlist[];\n}\n\nexport function useAllSelectors(): CategoryItem[] {\n  const data = useStaticQuery<AllSelectorsQuery>(graphql`\n    query AllSelectors {\n      allProgram {\n        group(field: playlist___selector) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              date(formatString: \"YYYY-MM-DD\")\n              title\n              fields {\n                slug\n              }\n              playlist {\n                id\n                indexInWeek\n                title\n                artist\n                year\n                nation\n                selector\n                youtube\n                corner\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return React.useMemo(() => {\n    return data.allProgram.group\n      .filter((group) => group.fieldValue !== '草野マサムネ')\n      .map((group) => {\n        const edges = removeMultiple(group.edges as Edge[]);\n        return {\n          fieldValue: group.fieldValue ?? 'selector',\n          edges,\n          playlist: edges.reduce<Playlist[]>(\n            (accum, curr) =>\n              curr.node.playlist ? [...accum, ...curr.node.playlist.filter((tune) => tune.selector === group.fieldValue)] : [...accum],\n            []\n          ),\n        };\n      })\n      .sort((a, b) => b.playlist.length - a.playlist.length || b.edges.length - a.edges.length);\n  }, [data]);\n}\n\ntype Edge = {\n  node: Pick<Program, 'id' | 'week' | 'date' | 'title' | 'fields'> & {\n    playlist?: Playlist[];\n  };\n};\ntype Playlist = Pick<ProgramPlaylist, 'id' | 'title' | 'artist' | 'year' | 'selector' | 'youtube'>[];\n\nfunction removeMultiple(edges: Edge[]): Edge[] {\n  return edges.reduce<Edge[]>((accum, curr) => {\n    if (accum.map((d) => d.node.id).indexOf(curr.node.id) >= 0) return accum;\n    return [...accum, curr];\n  }, []);\n}\n"],"sourceRoot":""}