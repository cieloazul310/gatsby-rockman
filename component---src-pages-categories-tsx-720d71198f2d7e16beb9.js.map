{"version":3,"sources":["webpack:///./src/utils/graphql-hooks/useProgramTop25.tsx","webpack:///./src/pages/categories.tsx","webpack:///./src/utils/graphql-hooks/useAllPrograms.tsx","webpack:///./src/utils/useSorter.tsx","webpack:///./src/utils/graphql-hooks/index.tsx","webpack:///./src/utils/graphql-hooks/useAllSelectors.tsx","webpack:///./src/utils/graphql-hooks/useAllNations.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","webpack:///./src/utils/graphql-hooks/useTunesTop25.tsx","webpack:///./src/components/ListItemAppLink.tsx","webpack:///./src/components/ProgramItem.tsx","webpack:///./src/utils/removeMultiple.ts","webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx"],"names":["useProgramTop25","data","useStaticQuery","React","allArtist","edges","BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","CategoriesPage","categories","useAllCategories","titles","map","fieldValue","initialTab","useParseHash","state","category","undefined","tab","setTab","sortProgramNode","useSortProgramNode","onItemClicked","index","useHash","window","scrollTo","title","tabs","value","onChange","event","newValue","variant","scrollButtons","aria-label","label","d","key","length","onChangeIndex","resistance","animateHeight","disableGutters","button","onClick","primary","component","footer","sort","i","node","id","program","last","useAllPrograms","allProgram","useSorter","useAppState","useSortProgram","sorter","a","b","week","useAllSelectors","group","filter","removeMultiple","totalCount","useAllNations","nation","tunesCount","reduce","accum","curr","localeCompare","ListItemAvatar","props","ref","classes","className","other","context","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","marginTop","name","ListItemLink","color","inset","to","primaryText","secondaryText","avatar","secondaryAction","textClasses","useMediaQuery","theme","breakpoints","down","ListItem","GatsbyLink","ListItemText","secondary","ListItemSecondaryAction","AppLink","useStyles","makeStyles","createStyles","paddingLeft","spacing","ProgramItem","useAvatarStyles","Avatar","src","fields","image","slug","date","divider","arr","getVal","vals","set","Set","Array","from","val","indexOf","useAllArtists"],"mappings":"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","file":"component---src-pages-categories-tsx-720d71198f2d7e16beb9.js","sourcesContent":["import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { ProgramCountQuery } from '../../../graphql-types';\n\nexport function useProgramTop25() {\n  const data = useStaticQuery<ProgramCountQuery>(graphql`\n    query ProgramCount {\n      allArtist(sort: { fields: programCount, order: DESC }, limit: 25, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n","import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Tabs from '@material-ui/core/Tabs';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from '../layout/TabLayout';\nimport TabPane from '../layout/TabPane';\nimport Tab from '../components/MuiTab';\nimport Section, { SectionDivider } from '../components/Section';\nimport Article, { Paragraph } from '../components/Article';\nimport ProgramItem from '../components/ProgramItem';\nimport Jumbotron from '../components/Jumbotron';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\nimport { useSortProgramNode } from '../utils/useSorter';\nimport { useParseHash, useHash } from '../utils/useHash';\nimport { useAllCategories } from '../utils/graphql-hooks';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\ninterface WindowState {\n  category?: string;\n}\n\nfunction CategoriesPage() {\n  const categories = useAllCategories();\n  const titles = React.useMemo(() => ['', ...categories.map(({ fieldValue }) => fieldValue ?? '')], [categories]);\n  const initialTab = useParseHash<WindowState>(titles, (state) => state?.category ?? undefined);\n  const [tab, setTab] = React.useState(initialTab);\n\n  const sortProgramNode = useSortProgramNode();\n  const handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setTab(newValue);\n  };\n  const handleChangeIndex = (index: number) => {\n    setTab(index);\n  };\n  const onItemClicked = (index: number) => () => {\n    setTab(index);\n  };\n\n  useHash(tab, titles);\n  React.useEffect(() => {\n    if (typeof window === 'object') {\n      window.scrollTo(0, 0);\n    }\n  }, [tab]);\n\n  return (\n    <Layout\n      title=\"テーマ\"\n      tabs={\n        <Tabs value={tab} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          <Tab label=\"概要\" />\n          {categories.map((d, index) => (\n            <Tab key={d.fieldValue ?? index} label={`${d.fieldValue} ${d.edges.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={tab} onChangeIndex={handleChangeIndex} resistance animateHeight={typeof window === 'object'}>\n        <TabPane value={tab} index={0} disableGutters>\n          <Jumbotron title=\"テーマ\" />\n          <SectionDivider />\n          <Section>\n            <Article>\n              <Paragraph>\n                ロック大陸漫遊記の放送回を「アーティスト特集」「スピッツメンバーと漫遊記」など特定のテーマで分類したページです。\n              </Paragraph>\n              <List>\n                {categories.map((category, index) => (\n                  <ListItem key={index} button onClick={onItemClicked(index + 1)}>\n                    <ListItemText primary={category.fieldValue} />\n                    <Typography variant=\"button\" component=\"span\">\n                      {category.edges.length}回\n                    </Typography>\n                  </ListItem>\n                ))}\n              </List>\n            </Article>\n          </Section>\n        </TabPane>\n        {categories.map((d, index) => (\n          <TabPane key={index} value={tab} index={index + 1} disableGutters>\n            <Jumbotron title={d.fieldValue} footer={`全${d.edges.length}回`} />\n            <SectionDivider />\n            <Section>\n              <List>\n                {d.edges.sort(sortProgramNode).map(({ node }, i) => (\n                  <ProgramItem key={node.id} program={node} last={i === d.edges.length - 1} />\n                ))}\n              </List>\n            </Section>\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllProgramQuery } from '../../../graphql-types';\n\nexport function useAllPrograms() {\n  const data = useStaticQuery<AllProgramQuery>(graphql`\n    query AllProgram {\n      allProgram(sort: { fields: week, order: ASC }) {\n        edges {\n          node {\n            id\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            fields {\n              slug\n              image\n            }\n            guests\n            playlist {\n              artist {\n                name\n              }\n              corner\n              id\n              indexInWeek\n              index\n              kana\n              label\n              nation\n              producer\n              selector\n              title\n              week\n              year\n              youtube\n            }\n            subtitle\n            week\n            year\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.edges.map(({ node }) => node);\n  }, [data.allProgram.edges]);\n}\n","import * as React from 'react';\nimport { useAppState } from '../gatsby-theme-aoi-top-layout/utils/AppStateContext';\nimport { Maybe, Program, ProgramPlaylist } from '../../graphql-types';\n\n/** usage\n * const sorter = useSorter();\n * programs.sort((a, b) => sorter(a.week - b.week))\n */\nexport default function useSorter() {\n  const { sort } = useAppState();\n  return React.useCallback((value: number) => (sort === 'older' ? value : -value), [sort]);\n}\n\nexport function useSortProgram() {\n  const sorter = useSorter();\n  return (a: Maybe<Pick<Program, 'week'>> | undefined, b: Maybe<Pick<Program, 'week'>> | undefined) =>\n    sorter((a?.week ?? 0) - (b?.week ?? 0));\n}\n\nexport function useSortProgramNode() {\n  const sorter = useSorter();\n  return (a: { node: Maybe<Pick<Program, 'week'>> }, b: { node: Maybe<Pick<Program, 'week'>> }) =>\n    sorter((a?.node?.week ?? 0) - (b?.node?.week ?? 0));\n}\n\nexport function useSortPlaylist() {\n  const sorter = useSorter();\n  return (\n    a: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined,\n    b: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined\n  ) => sorter((a?.week ?? 0) - (b?.week ?? 0) || (a?.indexInWeek ?? 0) - (b?.indexInWeek ?? 0));\n}\n","export * from './useAllPrograms';\nexport * from './useAllTunes';\nexport * from './useAllArtists';\nexport * from './useAllCategories';\nexport * from './useAllSelectors';\nexport * from './useAllNations';\nexport * from './useAllYears';\nexport * from './useProgramTop25';\nexport * from './useTunesTop25';\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { removeMultiple } from '../removeMultiple';\nimport { AllSelectorsQuery } from '../../../graphql-types';\n\nexport interface CategoryItem {\n  fieldValue: string;\n  edges: AllSelectorsQuery['allProgram']['group'][number]['edges'][number][];\n  totalCount: number;\n}\n\nexport function useAllSelectors(): CategoryItem[] {\n  const data = useStaticQuery<AllSelectorsQuery>(graphql`\n    query AllSelectors {\n      allProgram(filter: { playlist: { elemMatch: { selector: { regex: \"/^(?!.*草野マサムネ).*$/\" } } } }) {\n        group(field: playlist___selector) {\n          fieldValue\n          totalCount\n          edges {\n            node {\n              id\n              week\n              date(formatString: \"YYYY-MM-DD\")\n              title\n              fields {\n                slug\n              }\n              playlist {\n                id\n                indexInWeek\n                title\n                artist {\n                  name\n                }\n                year\n                nation\n                selector\n                youtube\n                corner\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return React.useMemo(() => {\n    return data.allProgram.group\n      .filter((group) => group.fieldValue !== '草野マサムネ')\n      .map((group) => {\n        const edges = removeMultiple(group.edges, ({ node }) => node.id);\n        return {\n          fieldValue: group.fieldValue ?? 'selector',\n          edges,\n          totalCount: group.totalCount,\n        };\n      })\n      .sort((a, b) => b.totalCount - a.totalCount || b.edges.length - a.edges.length);\n  }, [data]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { isSchemeNations } from '../getNationColor';\nimport { AllNationsQuery } from '../../../graphql-types';\n\nexport function useAllNations() {\n  const { group } = useStaticQuery<AllNationsQuery>(graphql`\n    query AllNations {\n      allArtist(filter: { name: { ne: \"スピッツ\" } }) {\n        group(field: nation) {\n          fieldValue\n          totalCount\n          edges {\n            node {\n              tunesCount\n            }\n          }\n        }\n      }\n    }\n  `).allArtist;\n\n  return React.useMemo(() => {\n    return group\n      .map(({ fieldValue, totalCount, edges }) => ({\n        nation: fieldValue,\n        totalCount,\n        tunesCount: edges.reduce((accum, curr) => accum + curr.node.tunesCount, 0),\n      }))\n      .sort((a, b) => b.totalCount - a.totalCount || (a.nation ?? '').localeCompare(b.nation ?? ''));\n  }, [group]);\n}\n\nexport function useSchemeNations() {\n  const allNations = useAllNations();\n  return React.useMemo(() => {\n    const schemed = allNations.filter(({ nation }) => isSchemeNations(nation ?? ''));\n    const notSchemed = allNations\n      .filter(({ nation }) => !isSchemeNations(nation ?? ''))\n      .reduce(\n        (accum, curr) => ({\n          ...accum,\n          totalCount: accum.totalCount + curr.totalCount,\n          tunesCount: accum.tunesCount + curr.tunesCount,\n        }),\n        { nation: 'others', totalCount: 0, tunesCount: 0 }\n      );\n    return [...schemed, notSchemed];\n  }, [allNations]);\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { TunesCountQuery } from '../../../graphql-types';\n\nexport function useTunesTop25() {\n  const data = useStaticQuery<TunesCountQuery>(graphql`\n    query TunesCount {\n      allArtist(sort: { fields: tunesCount, order: DESC }, limit: 25, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n","import * as React from 'react';\nimport { Link as GatsbyLink, GatsbyLinkProps } from 'gatsby';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemText, { ListItemTextProps } from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { LinkProps as MuiLinkProps } from '@material-ui/core/Link';\nimport { Theme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\n\ntype ListItemLinkProps<T = Record<string, unknown>> = Omit<ListItemProps, 'ref'> &\n  Pick<MuiLinkProps, 'color'> & {\n    to: string;\n    primaryText: string;\n    secondaryText?: string;\n    inset?: boolean;\n    avatar?: JSX.Element;\n    secondaryAction?: JSX.Element;\n    textClasses?: ListItemTextProps['classes'];\n  } & Omit<GatsbyLinkProps<T>, 'ref' | 'button'>;\n\nfunction ListItemLink({\n  color = 'inherit',\n  button = false,\n  inset = false,\n  to,\n  primaryText,\n  secondaryText,\n  avatar,\n  secondaryAction,\n  textClasses,\n  ...props\n}: ListItemLinkProps) {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('xs'));\n\n  return isMobile || button ? (\n    <ListItem component={GatsbyLink} to={to} button {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText classes={textClasses} primary={primaryText} secondary={secondaryText} inset={inset} />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  ) : (\n    <ListItem {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText\n        classes={textClasses}\n        inset={inset}\n        primary={\n          <AppLink to={to} color={color}>\n            {primaryText}\n          </AppLink>\n        }\n        secondary={secondaryText || null}\n      />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  );\n}\nexport default ListItemLink;\n","import * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport ListItemLink from './ListItemAppLink';\nimport { useAvatarStyles } from '../styles';\nimport { Maybe, Program } from '../../graphql-types';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    inset: {\n      paddingLeft: theme.spacing(2),\n    },\n  })\n);\n\ninterface Props {\n  program: Maybe<Pick<Program, 'fields' | 'title' | 'week' | 'date'>>;\n  last?: boolean;\n}\n\nfunction ProgramItem({ program, last }: Props) {\n  const classes = useAvatarStyles();\n  const textClasses = useStyles();\n  return (\n    <ListItemLink\n      avatar={<Avatar className={classes.avatar} src={program?.fields?.image ?? undefined} variant=\"square\" />}\n      to={program?.fields?.slug ?? '#'}\n      primaryText={program?.title ?? 'タイトル'}\n      secondaryText={`第${program?.week}回 ${program?.date}`}\n      divider={!last}\n      inset\n      textClasses={textClasses}\n    />\n  );\n}\n\nexport default ProgramItem;\n","export function removeMultiple<T>(arr: T[], getVal: (item: T) => unknown): T[] {\n  const vals = arr.map(getVal);\n  const set = new Set(vals);\n  return Array.from(set).map((val) => arr[vals.indexOf(val)]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllArtistsQuery } from '../../../graphql-types';\n\nexport function useAllArtists() {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allArtist(sort: { fields: sortName, order: ASC }, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n            program {\n              date(formatString: \"YYYY-MM-DD\")\n              week\n            }\n            tunes {\n              title\n              year\n              week\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n\nexport type ArtistItem = ReturnType<typeof useAllArtists>[number];\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n                image\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.edges.length - a.edges.length);\n  }, [data]);\n}\n\nexport function useCategories(fieldValues: string[]) {\n  const categories = useAllCategories();\n  return React.useMemo(() => {\n    return categories.filter((category) => category.fieldValue && fieldValues.includes(category.fieldValue));\n  }, [fieldValues, categories]);\n}\n"],"sourceRoot":""}