{"version":3,"sources":["webpack:///../gatsby-theme-aoi/src/layouts/TabPageLayout/index.tsx","webpack:///./src/pages/corners.tsx"],"names":["TabPageLayout","children","maxWidth","disablePaddingTop","disableGutters","props","CornerPage","title"],"mappings":"4KAeeA,IARf,YAAwH,IAA/FC,EAA+F,EAA/FA,SAA+F,IAArFC,gBAAqF,MAA1E,KAA0E,MAApEC,yBAAoE,aAA1CC,sBAA0C,SAAhBC,E,oIAAgB,iEACtH,OACE,gBAAC,IAAD,eAAQH,SAAUA,EAAUC,kBAAmBA,EAAmBC,eAAgBA,GAAoBC,GACnGJ,K,kCCVP,mCAmFeK,UARf,WACE,OACE,gBAAC,IAAD,CAAQC,MAAM,QACZ","file":"component---src-pages-corners-tsx-8ea525db472649993b1f.js","sourcesContent":["import * as React from 'react';\nimport Layout, { LayoutProps } from '../../layout';\n\ninterface Props extends LayoutProps {\n  tabSticky?: boolean;\n}\n\nfunction TabPageLayout({ children, maxWidth = 'xl', disablePaddingTop = true, disableGutters = true, ...props }: Props) {\n  return (\n    <Layout maxWidth={maxWidth} disablePaddingTop={disablePaddingTop} disableGutters={disableGutters} {...props}>\n      {children}\n    </Layout>\n  );\n}\n\nexport default TabPageLayout;\n","import * as React from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { useLocation, WindowLocation } from '@reach/router';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from 'gatsby-theme-aoi/src/layouts/TabPageLayout';\nimport TabPane from 'gatsby-theme-aoi/src/layout/TabPane';\nimport LazyViewer from '../components/LazyViewer';\n//import { useCorners } from '../utils/graphql-hooks';\n\ntype LocationWithState = WindowLocation & {\n  state?: {\n    corner?: string;\n  };\n};\n/*\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\nfunction CornersPage() {\n  \n  const location: LocationWithState = useLocation();\n  const corners = useCorners();\n  const initialValue =\n    location.state && location.state.corner\n      ? corners.map(d => d[0]).indexOf(location.state.corner)\n      : 0;\n  const [value, setValue] = React.useState(initialValue);\n  const _handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n  const _handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n\n  return (\n    <Layout\n      title={`${corners[value][0]}`}\n      tabSticky\n      componentViewports={{ BottomNav: false }}\n      tabs={\n        <Tabs\n          value={value}\n          onChange={_handleChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          {corners.map(d => (\n            <Tab key={d[0]} label={`${d[0]} ${d[2]}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews\n        index={value}\n        onChangeIndex={_handleChangeIndex}\n        resistance\n      >\n        {corners.map((d, index) => (\n          <TabPane key={index} value={value} index={index}>\n            <LazyViewer\n              programs={d[1]}\n              divisor={15}\n              filter={tune => tune.corner === d[0]}\n            />\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n    </Layout>\n  );\n}\n\nexport default CornersPage;\n*/\nfunction CornerPage() {\n  return (\n    <Layout title=\"コーナー\">\n      <p>コーナー</p>\n    </Layout>\n  );\n}\n\nexport default CornerPage;\n"],"sourceRoot":""}