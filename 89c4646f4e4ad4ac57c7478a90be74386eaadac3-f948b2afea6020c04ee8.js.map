{"version":3,"sources":["webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx","webpack:///../node_modules/@material-ui/core/esm/internal/svg-icons/createSvgIcon.js"],"names":["useAllArtists","data","React","allProgram","group","map","item","edges","reduce","accum","curr","d","node","id","indexOf","removeMultiple","playlist","filter","artist","fieldValue","tunes","kana","nation","img","tune","youtube","useAllCategories","sort","a","b","length","createSvgIcon","path","displayName","Component","props","ref","muiName"],"mappings":"04umBAaO,SAASA,IACd,IAAMC,EAAO,OAoBb,OAAOC,WAAc,WACnB,OAAOD,EAAKE,WAAWC,MAAMC,KAAI,SAAAC,GAC/B,IAAMC,EA+BZ,SAAwBA,GACtB,OAAOA,EAAMC,QAAqB,SAACC,EAAOC,GACxC,OAAID,EAAMJ,KAAI,SAAAM,GAAC,OAAIA,EAAEC,KAAKC,MAAIC,QAAQJ,EAAKE,KAAKC,KAAO,EAAUJ,EACjE,YAAWA,GAAX,CAAkBC,MACjB,IAnCeK,CAAeT,EAAKC,OAAOF,KAAI,gBAAGO,EAAH,EAAGA,KAAH,wBACxCA,EADwC,CAE3CI,SAAUJ,EAAKI,SAASC,QACtB,qBAAGC,SAAwBZ,EAAKa,mBAG9BC,EAAQb,EAAMC,QAA+D,SAACC,EAAOC,GAAR,kBAAqBD,GAArB,EAA+BC,EAAKM,aAAW,IAP3F,EAQZI,EARY,GAQ9BC,EAR8B,EAQ9BA,KAAMC,EARwB,EAQxBA,OACRC,EAAOH,EACXH,QAAO,SAAAO,GAAI,MAAqB,KAAjBA,EAAKC,WACpBpB,KAAI,SAAAmB,GAAI,OAAIA,EAAKC,WAXmB,GAYvC,MAAO,CACLN,WAAYb,EAAKa,WACjBE,OACAC,SACAf,QACAa,QACAG,IAAKA,EAAM,0BAA0BA,EAA7B,SAA2C,WAGtD,I,0BCpDE,SAASG,IACd,IAAMzB,EAAO,OAoBb,OAAOC,WAAc,WACnB,OAAOD,EAAKE,WAAWC,MAAMuB,MAC3B,SAACC,EAAGC,GAAJ,OAAUA,EAAEtB,MAAMuB,OAASF,EAAErB,MAAMuB,YAEpC,M,kCC7BL,0EAGe,SAASC,EAAcC,EAAMC,GAC1C,IAAIC,EAAY,OAAW,cAAiB,SAAUC,EAAOC,GAC3D,OAAoB,gBAAoB,IAAS,YAAS,GAAID,EAAO,CACnEC,IAAKA,IACHJ,OAQN,OADAE,EAAUG,QAAU,IAAQA,QACrBH","file":"89c4646f4e4ad4ac57c7478a90be74386eaadac3-f948b2afea6020c04ee8.js","sourcesContent":["import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllArtistsQuery, Program, ProgramPlaylist } from '../../../graphql-types';\n\nexport interface ArtistItem {\n  fieldValue: string;\n  kana?: string;\n  nation: string;\n  edges: ArtistEdge[];\n  tunes: ProgramPlaylist[];\n  img?: string;\n}\n\nexport function useAllArtists(): ArtistItem[] {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allProgram(sort: { fields: date, order: ASC }) {\n        group(field: playlist___artist) {\n          edges {\n            node {\n              id\n              playlist {\n                artist\n                kana\n                nation\n                youtube\n              }\n            }\n          }\n          fieldValue\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.map(item => {\n      const edges = removeMultiple(item.edges).map(({ node }) => ({\n        ...node,\n        playlist: node.playlist.filter(\n          ({ artist }) => artist === item.fieldValue\n        )\n      }));\n      const tunes = edges.reduce<Pick<ProgramPlaylist, 'artist' | 'kana' | 'youtube'>[]>((accum, curr) => [...accum, ...curr.playlist], []);\n      const [{ kana, nation }] = tunes;\n      const [img] = tunes\n        .filter(tune => tune.youtube !== '')\n        .map(tune => tune.youtube);\n      return {\n        fieldValue: item.fieldValue,\n        kana,\n        nation,\n        edges,\n        tunes,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : null\n      };\n    });\n  }, []);\n}\n\ninterface ArtistEdge {\n  node: Pick<Program, 'id'> & {\n    playlist: ArtistPlaylist;\n  };\n}\n\ntype ArtistPlaylist = Pick<ProgramPlaylist, 'artist' | 'kana' | 'nation' | 'youtube'>[];\n\nfunction removeMultiple(edges: ArtistEdge[]) {\n  return edges.reduce<ArtistEdge[]>((accum, curr) => {\n    if (accum.map(d => d.node.id).indexOf(curr.node.id) >= 0) return accum;\n    return [...accum, curr];\n  }, []);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort(\n      (a, b) => b.edges.length - a.edges.length\n    );\n  }, []);\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport SvgIcon from '../../SvgIcon';\nexport default function createSvgIcon(path, displayName) {\n  var Component = React.memo(React.forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({}, props, {\n      ref: ref\n    }), path);\n  }));\n\n  if (process.env.NODE_ENV !== 'production') {\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return Component;\n}"],"sourceRoot":""}