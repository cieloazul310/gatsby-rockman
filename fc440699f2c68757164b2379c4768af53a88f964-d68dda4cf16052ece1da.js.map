{"version":3,"sources":["webpack:///./src/utils/sortByYomi.ts","webpack:///./src/utils/graphql-hooks/useAllPrograms.tsx","webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx"],"names":["sortArtists","artists","options","sortType","sort","a","b","edges","length","sortByEdges","sortByYomi","tunes","sortByTunes","getYomi","fieldValue","kana","localeCompare","artistName","the","slice","useAllPrograms","data","React","allProgram","map","node","img","playlist","filter","tune","index","youtube","useAllArtists","group","item","reduce","accum","curr","d","id","indexOf","removeMultiple","artist","nation","undefined","useArtists","limit","allArtists","useAllCategories","useCategories","fieldValues","categories","category","includes"],"mappings":"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","file":"fc440699f2c68757164b2379c4768af53a88f964-d68dda4cf16052ece1da.js","sourcesContent":["import { ArtistItem } from './graphql-hooks';\n\nexport type SortType = 'abc' | 'edges' | 'tunes';\n\ninterface SortArtistsOptions {\n  sortType?: SortType;\n  sortAsc?: boolean;\n}\n\nexport default function sortArtists(artists: ArtistItem[], options: SortArtistsOptions = {}) {\n  const sortType = options.sortType || 'abc';\n  return [...artists].sort((a, b) =>\n    sortType === 'edges'\n      ? sortByEdges(a, b) || sortByYomi(a, b)\n      : sortType === 'tunes'\n      ? sortByTunes(a, b) || sortByYomi(a, b)\n      : sortByYomi(a, b)\n  );\n}\n\nexport function sortByYomi(a: ArtistItem, b: ArtistItem) {\n  return getYomi(a.fieldValue, a.kana).localeCompare(getYomi(b.fieldValue, b.kana));\n}\n\nexport function sortByEdges(a: ArtistItem, b: ArtistItem) {\n  return -(a.edges.length - b.edges.length);\n}\n\nexport function sortByTunes(a: ArtistItem, b: ArtistItem) {\n  return -(a.tunes.length - b.tunes.length);\n}\n\nexport function getYomi(artistName: string, kana?: string) {\n  const the = artistName.slice(0, 4);\n  if (the === 'The ' || the === 'THE ' || the === 'the ') return artistName.slice(4);\n  return kana || artistName;\n}\n\nexport function encodeArtistName(artistName: string) {\n  return encodeURIComponent(artistName.replace(/[' ']+/g, '_'));\n}\n\nexport function decodeArtistName(artistName: string) {\n  return decodeURIComponent(artistName.replace(/['_']+/g, ' '));\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { QueriedProgram, ArtistItem, CategoryItem, CornerItem, SelectorItem } from '../../types';\nimport { getProgramsContainsValue, filterPlaylist } from '../filterPlaylist';\nimport { AllProgramQuery, ProgramPlaylist } from '../../../graphql-types';\n\nexport function useAllPrograms(): QueriedProgram[] {\n  const data = useStaticQuery<AllProgramQuery>(graphql`\n    query AllProgram {\n      allProgram(sort: { fields: week, order: ASC }) {\n        edges {\n          node {\n            id\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            fields {\n              slug\n            }\n            guests\n            playlist {\n              artist\n              corner\n              id\n              indexInWeek\n              index\n              kana\n              label\n              name\n              nation\n              producer\n              selector\n              title\n              week\n              year\n              youtube\n            }\n            subtitle\n            week\n            year\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.edges.map(({ node }) => {\n      const [img] = node.playlist.filter((tune, index) => index !== 0 && tune.youtube && tune.youtube !== '').map((tune) => tune.youtube);\n      return {\n        ...node,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : null,\n      };\n    });\n  }, [data.allProgram.edges]);\n}\n/*\nexport function useAllTunes(): ProgramPlaylist[] {\n  //console.log('useAllTunes');\n  const programs = useAllPrograms();\n  return React.useMemo(() => {\n    //console.log('useAllTunes useMemo');\n    return programs.reduce((accum, curr) => [...accum, ...curr.playlist], []);\n  }, []);\n}\n*/\n/*\nexport function useAllArtists(): ArtistItem[] {\n  console.log('useAllArtists');\n  const allTunes = useAllTunes();\n  return React.useMemo(() => {\n    console.log('useAllArtists useMemo');\n    return allTunes.reduce<ArtistItem[]>((accum, curr) => {\n      const existedIndex = accum.map(d => d[0]).indexOf(curr.artist);\n      if (existedIndex < 0) {\n        return [...accum, [curr.artist, curr.kana, curr.nation, [curr]]];\n      } else {\n        accum[existedIndex][3].push(curr);\n        return accum;\n      }\n    }, []);\n  }, []);\n}\n*/\n/*\nexport function useCategories(): CategoryItem[] {\n  //console.log('useCategories');\n  const programs = useAllPrograms();\n  return React.useMemo(() => {\n    console.log('useCategories useMemo');\n    const categories: CategoryItem[] = [];\n    programs\n      .filter(program => program.categories.length)\n      .forEach(program => {\n        program.categories.forEach(category => {\n          const existedIndex = categories.map(d => d[0]).indexOf(category);\n          if (existedIndex < 0) {\n            categories.push([category, [program]]);\n          } else {\n            categories[existedIndex][1].push(program);\n          }\n        });\n      });\n    return categories.sort((a, b) => b[1].length - a[1].length);\n  }, []);\n}\n*/\n/*\nexport function useCorners(): CornerItem[] {\n  //console.log('useCorners');\n  const programs = useAllPrograms();\n  const allTunes = useAllTunes();\n  return React.useMemo(() => {\n    //console.log('useCorners useMemo');\n    return allTunes\n      .filter(tune => tune.corner !== '')\n      .reduce<CornerItem[]>((accum, curr) => {\n        const existedIndex = accum.map(d => d[0]).indexOf(curr.corner);\n        if (existedIndex < 0) {\n          const programsContainsCorner = getProgramsContainsValue(\n            'corner',\n            curr.corner\n          )(programs);\n\n          return [\n            ...accum,\n            [\n              curr.corner,\n              programsContainsCorner,\n              filterPlaylist('corner', curr.corner)(programsContainsCorner)\n                .length,\n            ],\n          ];\n        } else {\n          return accum;\n        }\n      }, [])\n      .sort((a, b) => b[2] - a[2]);\n  }, []);\n}\n*/\n/*\nexport function useSelectors(): SelectorItem[] {\n  //console.log('useSelectors');\n  const programs = useAllPrograms();\n  const allTunes = useAllTunes();\n  return React.useMemo(() => {\n    //console.log('useSelectors useMemo');\n    return allTunes\n      .filter(d => d.selector.length && d.selector !== '草野マサムネ')\n      .reduce<SelectorItem[]>((accum, curr) => {\n        const existedIndex = accum.map(d => d[0]).indexOf(curr.selector);\n        if (existedIndex < 0) {\n          const programsContainsSelector = getProgramsContainsValue(\n            'selector',\n            curr.selector\n          )(programs);\n          return [\n            ...accum,\n            [\n              curr.selector,\n              programsContainsSelector,\n              filterPlaylist(\n                'selector',\n                curr.selector\n              )(programsContainsSelector).length,\n            ],\n          ];\n        } else {\n          return accum;\n        }\n      }, [])\n      .sort((a, b) => b[2] - a[2]);\n  }, []);\n}\n*/\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport sortArtists, { SortType } from '../sortByYomi';\nimport { AllArtistsQuery, Program, ProgramPlaylist } from '../../../graphql-types';\n\nexport interface ArtistItem {\n  fieldValue: string;\n  kana?: string;\n  nation: string;\n  edges: ArtistEdge[];\n  tunes: ProgramPlaylist[];\n  img?: string;\n}\n\nexport function useAllArtists() {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allProgram(sort: { fields: date, order: ASC }) {\n        group(field: playlist___artist) {\n          edges {\n            node {\n              id\n              playlist {\n                artist\n                kana\n                nation\n                youtube\n              }\n            }\n          }\n          fieldValue\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.map((item) => {\n      const edges = removeMultiple(item.edges as ArtistEdge[]).map(({ node }) => ({\n        ...node,\n        playlist: node?.playlist?.filter(({ artist }) => artist === item.fieldValue) ?? [],\n      }));\n      const tunes = edges.reduce<ArtistPlaylist[]>((accum, curr) => [...accum, ...curr.playlist], []);\n      const [{ kana, nation }] = tunes;\n      const [img] = tunes\n        .filter((tune) => tune.youtube !== '')\n        .map((tune) => tune.youtube)\n        .slice(-1);\n\n      return {\n        fieldValue: item.fieldValue ?? '',\n        kana: kana ?? undefined,\n        nation: nation ?? '',\n        edges,\n        tunes,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : undefined,\n      };\n    });\n  }, [data]);\n}\n\ninterface ArtistEdge {\n  node: Pick<Program, 'id'> & {\n    playlist?: ArtistPlaylist[];\n  };\n}\n\ntype ArtistPlaylist = Pick<ProgramPlaylist, 'artist' | 'kana' | 'nation' | 'youtube'>;\n\nfunction removeMultiple(edges: ArtistEdge[]) {\n  return edges.reduce<ArtistEdge[]>((accum, curr) => {\n    if (accum.map((d) => d.node.id).indexOf(curr.node.id) >= 0) return accum;\n    return [...accum, curr];\n  }, []);\n}\n\nexport function useArtists(sortType: SortType, limit = 0) {\n  const allArtists = useAllArtists();\n  return React.useMemo(() => {\n    return sortArtists(allArtists, { sortType }).slice(0, limit || allArtists.length);\n  }, [sortType, limit, allArtists]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.edges.length - a.edges.length);\n  }, [data]);\n}\n\nexport function useCategories(fieldValues: string[]) {\n  const categories = useAllCategories();\n  return React.useMemo(() => {\n    return categories.filter((category) => category.fieldValue && fieldValues.includes(category.fieldValue));\n  }, [fieldValues, categories]);\n}\n"],"sourceRoot":""}