{"version":3,"sources":["webpack:///./src/pages/categories.tsx","webpack:///../node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","webpack:///../gatsby-theme-aoi/src/components/ListItemLink.tsx"],"names":["BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","CategoriesPage","location","useLocation","categories","useAllCategories","initialValue","state","category","map","d","fieldValue","indexOf","React","tab","setTab","sorter","useSorter","window","history","replaceState","title","tabSticky","componentViewports","BottomNav","tabs","value","onChange","event","newValue","variant","scrollButtons","aria-label","index","key","label","edges","length","onChangeIndex","resistance","sort","a","b","node","week","v","id","to","fields","slug","primaryText","secondaryText","date","divider","ListItemAvatar","props","ref","classes","className","other","context","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","marginTop","name","ListItemLink","color","button","inset","avatar","secondaryAction","useMediaQuery","theme","breakpoints","down","component","GatsbyLink","primary","secondary"],"mappings":"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","file":"component---src-pages-categories-tsx-64624452e1ce2a118361.js","sourcesContent":["import * as React from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport { useLocation, WindowLocation } from '@reach/router';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from 'gatsby-theme-aoi/src/layouts/TabPageLayout';\nimport TabPane from 'gatsby-theme-aoi/src/layout/TabPane';\nimport ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport useSorter from '../utils/useSorter';\nimport { useAllCategories } from '../utils/graphql-hooks';\n\ntype LocationWithState = WindowLocation & {\n  state?: {\n    category?: string;\n  };\n};\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\nfunction CategoriesPage() {\n  const location = useLocation() as LocationWithState;\n  const categories = useAllCategories();\n  // @TODO: add Hash support\n  const initialValue = location.state?.category ? categories.map((d) => d.fieldValue).indexOf(location.state.category) : 0;\n  const [tab, setTab] = React.useState(initialValue);\n  const sorter = useSorter();\n  const _handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setTab(newValue);\n  };\n  const _handleChangeIndex = (index: number) => {\n    setTab(index);\n  };\n  React.useEffect(() => {\n    if (window) window.history.replaceState(tab, '', `#${categories[tab].fieldValue}`);\n  }, [tab, categories]);\n\n  return (\n    <Layout\n      title={categories[tab]?.fieldValue ?? 'Category'}\n      tabSticky\n      componentViewports={{ BottomNav: false }}\n      tabs={\n        <Tabs value={tab} onChange={_handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          {categories.map((d, index) => (\n            <Tab key={d.fieldValue ?? index} label={`${d.fieldValue} ${d.edges.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={tab} onChangeIndex={_handleChangeIndex} resistance>\n        {categories.map((d, index) => (\n          <TabPane key={index} value={tab} index={index}>\n            <List>\n              {d.edges\n                .sort((a, b) => sorter(a.node.week && b.node.week ? a.node.week - b.node.week : 0))\n                .map((v) => (\n                  <ListItemLink\n                    key={v.node.id}\n                    to={v.node.fields?.slug ?? '#'}\n                    primaryText={v.node.title ?? 'Program'}\n                    secondaryText={`第${v.node.week}回 ${v.node.date}`}\n                    divider\n                  />\n                ))}\n            </List>\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import * as React from 'react';\nimport { Link as GatsbyLink, GatsbyLinkProps } from 'gatsby';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { LinkProps as MuiLinkProps } from '@material-ui/core/Link';\nimport { Theme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppLink from './AppLink';\n\ntype ListItemLinkProps<T = Record<string, unknown>> = Omit<ListItemProps, 'ref'> &\n  Pick<MuiLinkProps, 'color'> & {\n    to: string;\n    primaryText: string;\n    secondaryText?: string;\n    inset?: boolean;\n    avatar?: JSX.Element;\n    secondaryAction?: JSX.Element;\n  } & Omit<GatsbyLinkProps<T>, 'ref' | 'button'>;\n\nfunction ListItemLink({\n  color = 'inherit',\n  button = false,\n  inset = false,\n  to,\n  primaryText,\n  secondaryText,\n  avatar,\n  secondaryAction,\n  ...props\n}: ListItemLinkProps) {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('xs'));\n\n  return isMobile || button ? (\n    <ListItem component={GatsbyLink} to={to} button {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText primary={primaryText} secondary={secondaryText} inset={inset} />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  ) : (\n    <ListItem {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText\n        inset={inset}\n        primary={\n          <AppLink to={to} color={color}>\n            {primaryText}\n          </AppLink>\n        }\n        secondary={secondaryText || null}\n      />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  );\n}\nexport default ListItemLink;\n"],"sourceRoot":""}