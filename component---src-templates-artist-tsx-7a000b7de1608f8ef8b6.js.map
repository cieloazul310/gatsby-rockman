{"version":3,"sources":["webpack:///./src/components/TunesByProgram.tsx","webpack:///./src/templates/artist.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","spacing","header","title","fontWeight","typography","fontWeightBold","TunesByProgramSkeleton","classes","className","variant","color","width","Array","from","length","map","_","index","key","TunesByProgram","program","week","date","to","fields","slug","playlist","tune","id","ArtistTemplate","data","pageContext","programs","artist","tunes","filter","name","disableGutters","jumbotron","drawerContents","indicatorColor","centered","value","label","artists","relatedArtists"],"mappings":"4FAAA,sIASMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAASH,EAAMI,QAAQ,EAAG,IAE5BC,OAAQ,CACNF,QAASH,EAAMI,QAAQ,IAEzBE,MAAO,CACLC,WAAYP,EAAMQ,WAAWC,qBAiC5B,SAASC,IAAyB,MACjCC,EAAUb,IAChB,OACE,uBAAKc,UAAWD,EAAQT,MACtB,uBAAKU,UAAWD,EAAQN,QACtB,gBAAC,IAAD,CAAYQ,QAAQ,QAAQC,MAAM,iBAChC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAUC,MAAO,MAEnB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAUA,MAAO,OAGrB,gBAAC,IAAD,CAAYH,UAAWD,EAAQL,MAAOO,QAAQ,QAAQC,MAAM,aAC1D,gBAAC,IAAD,CAAUC,MAAO,QAGrB,qCAAMC,MAAMC,KAAK,CAAEC,OAAQ,IAAKC,KAAI,SAACC,EAAGC,GAAJ,OAAc,gBAAC,IAAD,CAAcC,IAAKD,cAArE,QAAmF,OAnB1EE,IAlBf,YAA0D,YAAhCC,EAAgC,EAAhCA,QAClBb,EAAUb,IAChB,OACE,uBAAKc,UAAWD,EAAQT,MACtB,uBAAKU,UAAWD,EAAQN,QACtB,gBAAC,IAAD,CAAYQ,QAAQ,QAAQC,MAAM,iBAChC,gBAAC,IAAD,SAAYU,aAAZ,EAAYA,EAASC,KAArB,KACA,gBAAC,IAAD,KAAWD,aAAX,EAAWA,EAASE,OAEtB,gBAAC,IAAD,CAAYd,UAAWD,EAAQL,MAAOO,QAAQ,SAC5C,gBAAC,IAAD,CAASc,GAAE,UAAEH,SAAF,UAAEA,EAASI,cAAX,aAAE,EAAiBC,YAAnB,QAA2B,KAAML,aAA5C,EAA4CA,EAASlB,SAGzD,qCAAMkB,SAAN,UAAMA,EAASM,gBAAf,aAAM,EAAmBX,KAAI,SAACY,GAAD,OAAU,gBAAC,IAAD,CAAMT,IAAKS,aAAF,EAAEA,EAAMC,GAAID,KAAMA,cAAlE,QAA+E,S,kCC5CrF,mIA+JeE,UAzHf,YAAsD,YAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YACxBC,EAAQ,UAAGF,EAAKG,cAAR,iBAAG,EAAab,eAAhB,aAAG,EAAsBL,KAAI,SAACK,GAAD,gCACtCA,EADsC,CAEzCM,SAAQ,UAAEI,EAAKG,cAAP,iBAAE,EAAaC,aAAf,aAAE,EAAoBC,QAAO,SAACR,GAAD,OAAUA,aAAA,EAAAA,EAAMN,SAASD,aAAf,EAAeA,EAASC,cAEzE,OACE,gBAAC,IAAD,CACEnB,MAAK,UAAE4B,EAAKG,cAAP,aAAE,EAAaG,KACpBC,gBAAc,EACdC,UAAW,gBAAC,IAAD,CAAkBL,OAAQH,EAAKG,SAC1CM,eAAgB,gBAAC,IAAD,CAAkBR,YAAaA,EAAatB,QAAQ,YAEpE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAM+B,eAAe,YAAYC,UAAQ,EAACC,MAAO,GAC/C,gBAAC,IAAD,CAAKC,MAAM,MACX,gBAAC,IAAD,CAAKA,MAAM,QAEb,2BACGX,aADH,EACGA,EAAUjB,KAAI,SAACK,GAAD,OACb,gBAAC,IAAD,CAAgBF,IAAKE,EAAQC,KAAMD,QAASA,SAIlD,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAqBlB,MAAM,iBAAiB0C,QAAO,UAAEd,EAAKG,cAAP,aAAE,EAAaY,kBAEpE,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAgBpC,QAAQ,SAASsB,YAAaA","file":"component---src-templates-artist-tsx-7a000b7de1608f8ef8b6.js","sourcesContent":["import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\nimport Tune, { TuneSkeleton, TuneProps } from './Tune';\nimport TextSpan from './TextSpan';\nimport { Maybe, Program } from '../../graphql-types';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(1, 0),\n    },\n    header: {\n      padding: theme.spacing(1),\n    },\n    title: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n  })\n);\n\nexport interface TunesByProgramProps {\n  program: Maybe<\n    Pick<Program, 'id' | 'week' | 'date' | 'fields' | 'title'> & {\n      playlist: TuneProps['tune'][];\n    }\n  >;\n}\n\nfunction TunesByProgram({ program }: TunesByProgramProps) {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          <TextSpan>第{program?.week}回</TextSpan>\n          <TextSpan>{program?.date}</TextSpan>\n        </Typography>\n        <Typography className={classes.title} variant=\"body1\">\n          <AppLink to={program?.fields?.slug ?? '#'}>{program?.title}</AppLink>\n        </Typography>\n      </div>\n      <div>{program?.playlist?.map((tune) => <Tune key={tune?.id} tune={tune} />) ?? null}</div>\n    </div>\n  );\n}\n\nexport default TunesByProgram;\n\nexport function TunesByProgramSkeleton() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div className={classes.header}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          <TextSpan>\n            <Skeleton width={40} />\n          </TextSpan>\n          <TextSpan>\n            <Skeleton width={60} />\n          </TextSpan>\n        </Typography>\n        <Typography className={classes.title} variant=\"body1\" color=\"secondary\">\n          <Skeleton width={260} />\n        </Typography>\n      </div>\n      <div>{Array.from({ length: 4 }).map((_, index) => <TuneSkeleton key={index} />) ?? null}</div>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n// import Typography from '@material-ui/core/Typography';\n// import Container from '@material-ui/core/Container';\n// import Box from '@material-ui/core/Box';\n// import Skeleton from '@material-ui/lab/Skeleton';\n// import SwipeableViews from 'react-swipeable-views';\n// import { virtualize, bindKeyboard, SlideRenderProps } from 'react-swipeable-views-utils';\n// import AppLink from 'gatsby-theme-aoi/src/components/AppLink';\nimport Layout from '../layout/Template';\nimport Section, { SectionDivider } from '../components/Section';\nimport { ArtistPageHeader } from '../components/PageHeader';\nimport TunesByProgram from '../components/TunesByProgram';\nimport ArtistItemContainer from '../components/ArtistItemContainer';\nimport PageNavigation from '../components/PageNavigation';\nimport DrawerNavigation from '../components/DrawerNavigation';\n/*\nimport Jumbotron from '../components/Jumbotron';\nimport LazyViewer from '../components/LazyViewer';\nimport { TuneCardSkeleton } from '../components/TuneCard';\n\nimport ContentBasis from '../components/ContentBasis';\nimport NavigationBox from '../components/NavigationBox';\nimport RelatedArtists from '../components/RelatedArtists';\n*/\n// import sortArtists from '../utils/sortByYomi';\n// import { useAllArtists } from '../utils/graphql-hooks/';\nimport { ArtistTemplateQuery, SitePageContext } from '../../graphql-types';\n\n// const VirtualizedSwipeableViews = bindKeyboard(virtualize(SwipeableViews));\n\ninterface Props {\n  data: ArtistTemplateQuery;\n  pageContext: SitePageContext;\n}\n\nfunction ArtistTemplate({ data, pageContext }: Props) {\n  const programs = data.artist?.program?.map((program) => ({\n    ...program,\n    playlist: data.artist?.tunes?.filter((tune) => tune?.week === program?.week),\n  }));\n  return (\n    <Layout\n      title={data.artist?.name}\n      disableGutters\n      jumbotron={<ArtistPageHeader artist={data.artist} />}\n      drawerContents={<DrawerNavigation pageContext={pageContext} variant=\"artist\" />}\n    >\n      <Section>\n        <Tabs indicatorColor=\"secondary\" centered value={0}>\n          <Tab label=\"曲\" />\n          <Tab label=\"詳細\" />\n        </Tabs>\n        <div>\n          {programs?.map((program) => (\n            <TunesByProgram key={program.week} program={program} />\n          ))}\n        </div>\n      </Section>\n      <SectionDivider />\n      <Section>\n        <ArtistItemContainer title=\"同じ回で登場したアーティスト\" artists={data.artist?.relatedArtists} />\n      </Section>\n      <SectionDivider />\n      <Section>\n        <PageNavigation variant=\"artist\" pageContext={pageContext} />\n      </Section>\n    </Layout>\n  );\n  /*\n  const allArtists = useAllArtists();\n  const artists = React.useMemo(() => sortArtists(allArtists), [allArtists]);\n  const { previous, next, index, fieldValue } = pageContext;\n  const programs = data.allProgram.group.map(({ edges }) => edges[0]);\n  const [loading, setLoading] = React.useState(false);\n  const [tab, setTab] = React.useState(index);\n  const _onChangeIndex = (i: number) => {\n    setTab(i);\n  };\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      if (tab !== index) {\n        setLoading(true);\n        navigate(`/artist/${artists[tab].fieldValue}`);\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [tab, artists, index]);\n\n  function slideRenderer({ index, key }: SlideRenderProps) {\n    const item = artists[index];\n    return (\n      <div key={key}>\n        <Jumbotron title={item.fieldValue} subtitle={`登場回: ${item.edges.length} 曲数: ${item.tunes.length}`} imgUrl={item.img} />\n        <Container maxWidth=\"md\">\n          <Box pt={4}>\n            {item.fieldValue === fieldValue ? (\n              <div>\n                <LazyViewer programs={programs.map(({ node }) => node)} filter={(tune) => tune.artist === fieldValue} />\n                <ContentBasis>\n                  <PageNavigation {...createNavigationProps(previous, next, '/artist')} />\n                </ContentBasis>\n                {item.fieldValue !== 'スピッツ' ? (\n                  <ContentBasis>\n                    <Typography variant=\"h6\" component=\"h3\" gutterBottom>\n                      {item.fieldValue}と同じ回で登場したアーティスト\n                    </Typography>\n                    <RelatedArtists edges={programs} />\n                  </ContentBasis>\n                ) : null}\n                <ContentBasis>\n                  <NavigationBox />\n                </ContentBasis>\n              </div>\n            ) : (\n              <div>\n                <Box py={2}>\n                  <Typography variant=\"subtitle2\">\n                    <Skeleton variant=\"text\" width={100} />\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    <Skeleton variant=\"text\" />\n                  </Typography>\n                  <TuneCardSkeleton />\n                </Box>\n              </div>\n            )}\n          </Box>\n        </Container>\n      </div>\n    );\n  }\n\n  return (\n    <Layout\n      title={fieldValue}\n      disableGutters\n      disablePaddingTop\n      loading={loading}\n      maxWidth={false}\n      componentViewports={{ BottomNav: false }}\n      drawerContents={<DrawerNavigation {...createNavigationProps(previous, next, '/artist')} />}\n    >\n      <VirtualizedSwipeableViews\n        index={tab}\n        onChangeIndex={_onChangeIndex}\n        slideRenderer={slideRenderer}\n        slideCount={artists.length}\n        resistance\n      />\n    </Layout>\n  );\n  */\n}\n\nexport default ArtistTemplate;\n\nexport const query = graphql`\n  query ArtistTemplate($name: String!) {\n    artist(name: { eq: $name }) {\n      tunesCount\n      programCount\n      image\n      kana\n      name\n      nation\n      program {\n        id\n        date(formatString: \"YYYY-MM-DD\")\n        week\n        title\n        subtitle\n        fields {\n          slug\n        }\n      }\n      tunes {\n        corner\n        id\n        indexInWeek\n        artist {\n          name\n        }\n        kana\n        label\n        nation\n        selector\n        title\n        week\n        year\n        youtube\n      }\n      relatedArtists {\n        name\n        image\n        tunesCount\n        programCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}