{"version":3,"sources":["webpack:///./src/templates/program.tsx","webpack:///./src/utils/removeMultiple.ts"],"names":["BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","ProgramTemplate","arr","getVal","vals","set","data","pageContext","previous","next","initialIndex","artists","program","playlist","map","tune","artist","item","name","Set","Array","from","val","indexOf","tabs","TonarinoTab","key","title","Section","Tabs","indicatorColor","centered","value","Tab","label","Tune","id","ArtistItemContainer","PageNavigation","variant","filter","element","Boolean","drawerContents","DrawerNavigation","index","onChangeIndex","fields","slug","navigate","resistance","NavigationBox"],"mappings":"sSAyBA,IAAMA,EAA6BC,uBAAaC,KA+KjCC,UAhKf,YAAuD,YCxCrBC,EAAUC,EACpCC,EACAC,EDsCmBC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YAEvBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KACZC,EAAeF,EAAW,EAAI,EAU9BG,EAAU,UAAAL,EAAKM,eAAL,SAAcC,UCrDEX,EDuD1BI,EAAKM,QAAQC,SAASC,KAAI,SAACC,GAAD,OAAUA,aAAV,EAAUA,EAAMC,UCvDNb,EDwDpC,SAACc,GAAD,OAAUA,aAAV,EAAUA,EAAMC,MCvDhBd,EAAOF,EAAIY,IAAIX,GACfE,EAAM,IAAIc,IAAIf,GACbgB,MAAMC,KAAKhB,GAAKS,KAAI,SAACQ,GAAD,OAASpB,EAAIE,EAAKmB,QAAQD,QDuDjD,GAEEE,EAAO,CACXhB,EAAW,gBAACiB,EAAD,CAAaC,IAAKlB,EAASmB,MAAOV,KAAMT,IAAe,KAClE,uBAAKkB,IAAI,QACP,gBAAC,IAAD,CAAmBd,QAASN,EAAKM,UACjC,gBAACgB,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAMC,eAAe,YAAYC,UAAQ,EAACC,MAAO,GAC/C,gBAACC,EAAA,EAAD,CAAKC,MAAM,MACX,gBAACD,EAAA,EAAD,CAAKC,MAAM,QAEb,qCACG5B,EAAKM,eADR,iBACG,EAAcC,gBADjB,aACG,EAAwBC,KAAI,SAACC,GAAD,OAC3B,gBAACoB,EAAA,EAAD,CAAMT,IAAKX,aAAF,EAAEA,EAAMqB,GAAIrB,KAAMA,SAIjC,gBAACa,EAAA,EAAD,MACA,gBAAC,IAAD,MACA,gBAACA,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACS,EAAA,EAAD,CAAqBV,MAAM,WAAWhB,QAASA,KAEjD,gBAACiB,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACU,EAAA,EAAD,CAAgBC,QAAQ,UAAUhC,YAAaA,MAGnDE,EAAO,gBAACgB,EAAD,CAAaC,IAAKjB,EAAKkB,MAAOV,KAAMR,IAAW,MACtD+B,QAAO,SAACC,GAAD,OAAqCC,QAAQD,MAEtD,OACE,gBAAC,IAAD,CAAQd,MAAK,UAAErB,EAAKM,eAAP,aAAE,EAAce,MAAOgB,eAAgB,gBAACC,EAAA,EAAD,CAAkBrC,YAAaA,EAAagC,QAAQ,aACtG,gBAACzC,EAAD,CAA4B+C,MAAO,EAAGC,cAhDhB,SAACD,GAAkB,QACvCA,IAAUnC,IACVD,SAAQA,GAAJ,UAAIA,EAAMsC,cAAV,OAAI,EAAcC,MAAQH,IAAUnC,EAAe,GACzDuC,mBAASxC,EAAKsC,OAAOC,MAEnBxC,SAAYA,GAAJ,UAAIA,EAAUuC,cAAd,OAAI,EAAkBC,MAAQH,IAAUnC,EAAe,GACjEuC,mBAASzC,EAASuC,OAAOC,QA0C+CE,YAAU,GAC/E1B,GAEH,gBAACI,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACuB,EAAA,EAAD,SA6GR,SAAS1B,EAAT,GAAiD,IAA1BR,EAA0B,EAA1BA,KACrB,OACE,2BACE,gBAAC,IAAD,CAAmBL,QAASK,IAC5B,gBAACW,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACO,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD","file":"component---src-templates-program-tsx-b9873cbb4f7277c4e1cd.js","sourcesContent":["import * as React from 'react';\nimport { graphql, navigate } from 'gatsby';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n// import { makeStyles, createStyles } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from '../layout';\nimport Section, { SectionDivider } from '../components/Section';\nimport { ProgramPageHeader } from '../components/PageHeader';\nimport Tune, { TuneSkeleton } from '../components/Tune';\nimport ArtistItemContainer from '../components/ArtistItemContainer';\nimport PageNavigation from '../components/PageNavigation';\nimport DrawerNavigation from '../components/DrawerNavigation';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\n// import NavigationBox from '../components/NavigationBox';\n// import ResponsiveContainer from '../components/ResponsiveContainer';\n// import { useAllPrograms, useCategories } from '../utils/graphql-hooks';\n// import createDescriptionString from '../utils/createDescriptionString';\n// import getAroundPrograms from '../utils/getAroundPrograms';\n// import { QueriedProgram } from '../types';\nimport { removeMultiple } from '../utils/removeMultiple';\nimport { ProgramTemplateQuery, SitePageContext, SitePageContextNext, SitePageContextPrevious } from '../../graphql-types';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n/*\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    content: {\n      background: theme.palette.background.paper,\n    },\n  })\n);\n*/\ninterface Props {\n  data: ProgramTemplateQuery;\n  pageContext: SitePageContext;\n}\n\nfunction ProgramTemplate({ data, pageContext }: Props) {\n  // const classes = useStyles();\n  const { previous, next } = pageContext;\n  const initialIndex = previous ? 1 : 0;\n  const handleChangeIndex = (index: number) => {\n    if (index === initialIndex) return;\n    if (next && next?.fields?.slug && index === initialIndex + 1) {\n      navigate(next.fields.slug);\n    }\n    if (previous && previous?.fields?.slug && index === initialIndex - 1) {\n      navigate(previous.fields.slug);\n    }\n  };\n  const artists = data.program?.playlist\n    ? removeMultiple(\n        data.program.playlist.map((tune) => tune?.artist),\n        (item) => item?.name\n      )\n    : [];\n\n  const tabs = [\n    previous ? <TonarinoTab key={previous.title} item={previous} /> : null,\n    <div key=\"main\">\n      <ProgramPageHeader program={data.program} />\n      <SectionDivider />\n      <Section>\n        <Tabs indicatorColor=\"secondary\" centered value={0}>\n          <Tab label=\"曲\" />\n          <Tab label=\"詳細\" />\n        </Tabs>\n        <div>\n          {data.program?.playlist?.map((tune) => (\n            <Tune key={tune?.id} tune={tune} />\n          ))}\n        </div>\n      </Section>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <ArtistItemContainer title=\"登場アーティスト\" artists={artists} />\n      </Section>\n      <SectionDivider />\n      <Section>\n        <PageNavigation variant=\"program\" pageContext={pageContext} />\n      </Section>\n    </div>,\n    next ? <TonarinoTab key={next.title} item={next} /> : null,\n  ].filter((element): element is JSX.Element => Boolean(element));\n\n  return (\n    <Layout title={data.program?.title} drawerContents={<DrawerNavigation pageContext={pageContext} variant=\"program\" />}>\n      <BindKeyboardSwipeableViews index={1} onChangeIndex={handleChangeIndex} resistance>\n        {tabs}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n  /*\n  const { program } = data;\n  const { previous, next, index, slug } = pageContext;\n  const allPrograms = useAllPrograms();\n  const categories = useCategories((program?.categories as string[]) ?? []);\n  const description = createDescriptionString(program);\n  const [loading, setLoading] = React.useState(false);\n  const [tab, setTab] = React.useState(index);\n  const _onChangeIndex = (i: number) => {\n    setTab(i);\n  };\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      if (tab !== index) {\n        setLoading(true);\n        navigate(allPrograms[tab]?.fields?.slug ?? '#');\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [tab, index, allPrograms]);\n\n  function slideRenderer({ index, key }: SlideRenderProps) {\n    const item = allPrograms[index];\n    return (\n      <div key={key}>\n        <Jumbotron\n          title={item.title ?? 'Artist'}\n          header={`第${item.week}回 ${item.date} 全${item.playlist?.length ?? 0}曲`}\n          subtitle={item.subtitle ?? undefined}\n          artists={Array.from(new Set(item.playlist?.map((d) => d?.artist ?? '')))}\n          imgUrl={item.fields?.image ?? undefined}\n        />\n        <ResponsiveContainer maxWidth=\"md\">\n          <Box pt={4}>\n            {item.fields?.slug === slug ? (\n              <div>\n                {program?.playlist?.map((tune, index) => (tune ? <TuneCard key={tune.id ?? index} tune={tune} /> : null))}\n                <ContentBasis>\n                  <PageNavigation {...createNavigationProps(previous, next)} />\n                </ContentBasis>\n                <ContentBasis>\n                  {categories.map((category, index) => (\n                    <List key={index} subheader={<ListSubheader>{category.fieldValue}</ListSubheader>}>\n                      {getAroundPrograms(category.edges, program?.id ?? 'dummy').map((v) => (\n                        <ListItemLink\n                          key={v.node.id}\n                          selected={v.node.id === program?.id}\n                          to={v.node.fields?.slug ?? '#'}\n                          primaryText={v.node.title ?? 'Program'}\n                          secondaryText={`第${v.node.week}回 ${v.node.date}`}\n                          divider\n                          dense\n                        />\n                      ))}\n                    </List>\n                  ))}\n                </ContentBasis>\n                <ContentBasis>\n                  <NavigationBox />\n                </ContentBasis>\n              </div>\n            ) : (\n              <div>\n                <TuneCardSkeleton />\n                <TuneCardSkeleton />\n                <TuneCardSkeleton />\n              </div>\n            )}\n          </Box>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n\n  return (\n    <Layout\n      title={program?.title ?? '放送回'}\n      description={description}\n      disableGutters\n      disablePaddingTop\n      maxWidth={false}\n      loading={loading}\n      componentViewports={{ BottomNav: false }}\n      drawerContents={<DrawerNavigation {...createNavigationProps(previous, next)} />}\n    >\n      <VirtualizedSwipeableViews\n        index={tab}\n        onChangeIndex={_onChangeIndex}\n        slideRenderer={slideRenderer}\n        slideCount={allPrograms.length}\n        resistance\n      />\n    </Layout>\n  );\n  */\n}\n\nexport default ProgramTemplate;\n\ninterface TonarinoTabProps {\n  item?: Pick<SitePageContextNext | SitePageContextPrevious, 'fields' | 'week' | 'title' | 'date'> | null;\n}\n\nfunction TonarinoTab({ item }: TonarinoTabProps) {\n  return (\n    <div>\n      <ProgramPageHeader program={item} />\n      <SectionDivider />\n      <Section>\n        <TuneSkeleton />\n        <TuneSkeleton />\n        <TuneSkeleton />\n        <TuneSkeleton />\n        <TuneSkeleton />\n        <TuneSkeleton />\n      </Section>\n    </div>\n  );\n}\n\nexport const query = graphql`\n  query ProgramTemplate($slug: String!) {\n    program(fields: { slug: { eq: $slug } }) {\n      id\n      date(formatString: \"YYYY-MM-DD\")\n      subtitle\n      title\n      week\n      year\n      guests\n      categories\n      fields {\n        image\n      }\n      playlist {\n        artist {\n          name\n          image\n          programCount\n          tunesCount\n        }\n        corner\n        id\n        index\n        indexInWeek\n        label\n        kana\n        nation\n        selector\n        title\n        year\n        week\n        youtube\n      }\n    }\n  }\n`;\n","export function removeMultiple<T>(arr: T[], getVal: (item: T) => unknown): T[] {\n  const vals = arr.map(getVal);\n  const set = new Set(vals);\n  return Array.from(set).map((val) => arr[vals.indexOf(val)]);\n}\n"],"sourceRoot":""}