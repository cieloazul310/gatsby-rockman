{"version":3,"sources":["webpack:///./src/utils/useSorter.tsx","webpack:///./src/templates/artist.tsx"],"names":["useSorter","sort","useAppState","React","value","VirtualizedSwipeableViews","bindKeyboard","virtualize","SwipeableViews","ArtistTemplate","data","pageContext","allArtists","useAllArtists","artists","sortArtists","previous","next","index","fieldValue","programs","allProgram","edges","loading","setLoading","tab","setTab","timer","setTimeout","navigate","clearTimeout","title","disableGutters","disablePaddingTop","maxWidth","componentViewports","BottomNav","drawerContents","createNavigationProps","onChangeIndex","i","slideRenderer","key","item","subtitle","length","tunes","imgUrl","img","pt","map","node","filter","tune","artist","py","variant","width","slideCount","resistance","query"],"mappings":"oKAGe,SAASA,IAAY,IAC1BC,EAASC,cAATD,KACR,OAAOE,eAAkB,SAACC,GAAD,MAA6B,UAATH,EAAmBG,GAASA,IAAQ,CAACH,M,kCCLpF,sQAmBMI,EAA4BC,uBAAaC,qBAAWC,MA+F3CC,UA3Ef,YAAsD,IAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YACxBC,EAAaC,cACbC,EAAUX,WAAc,kBAAMY,YAAYH,KAAa,CAACA,IACtDI,EAAsCL,EAAtCK,SAAUC,EAA4BN,EAA5BM,KAAMC,EAAsBP,EAAtBO,MAAOC,EAAeR,EAAfQ,WACzBC,EAAWV,EAAKW,WAAWC,MAJmB,EAKtBnB,YAAe,GAAtCoB,EAL6C,KAKpCC,EALoC,OAM9BrB,WAAee,GAA9BO,EAN6C,KAMxCC,EANwC,KAsDpD,OA5CAvB,aAAgB,WACd,IAAMwB,EAAQC,YAAW,WACnBH,IAAQP,IACVM,GAAW,GACXK,mBAAS,WAAWf,EAAQW,GAAKN,eAElC,KACH,OAAO,WACLW,aAAaH,MAEd,CAACF,EAAKX,EAASI,IAmChB,gBAAC,IAAD,CACEa,MAAOZ,EACPa,gBAAc,EACdC,mBAAiB,EACjBV,QAASA,EACTW,UAAU,EACVC,mBAAoB,CAAEC,WAAW,GACjCC,eAAgB,gBAAC,IAAqBC,YAAsBtB,EAAUC,EAAM,aAE5E,gBAACZ,EAAD,CACEa,MAAOO,EACPc,cA3DiB,SAACC,GACtBd,EAAOc,IA2DHC,cA7CN,YAAyD,IAAhCvB,EAAgC,EAAhCA,MAAOwB,EAAyB,EAAzBA,IACxBC,EAAO7B,EAAQI,GACrB,OACE,uBAAKwB,IAAKA,GACR,gBAAC,IAAD,CAAWX,MAAOY,EAAKxB,WAAYyB,SAAQ,QAAUD,EAAKrB,MAAMuB,OAArB,QAAmCF,EAAKG,MAAMD,OAAUE,OAAQJ,EAAKK,MAChH,gBAAC,IAAD,CAAWd,SAAS,MAClB,gBAAC,IAAD,CAAKe,GAAI,GACNN,EAAKxB,aAAeA,EACnB,2BACE,gBAAC,IAAD,CAAYC,SAAUA,EAAS8B,KAAI,qBAAGC,QAAkBC,OAAQ,SAACC,GAAD,OAAUA,EAAKC,SAAWnC,KAC1F,gBAAC,IAAmBmB,YAAsBtB,EAAUC,EAAM,YAC1D,gBAAC,IAAD,OAGF,2BACE,gBAAC,IAAD,CAAKsC,GAAI,GACP,gBAAC,IAAD,CAAYC,QAAQ,aAClB,gBAAC,IAAD,CAAUA,QAAQ,OAAOC,MAAO,OAElC,gBAAC,IAAD,CAAYD,QAAQ,MAClB,gBAAC,IAAD,CAAUA,QAAQ,UAEpB,gBAAC,IAAD,YAwBVE,WAAY5C,EAAQ+B,OACpBc,YAAU,MAQX,IAAMC,EAAQ","file":"component---src-templates-artist-tsx-0dd63e9a5c95446339a8.js","sourcesContent":["import * as React from 'react';\nimport { useAppState } from 'gatsby-theme-aoi-top-layout/src/utils/AppStateContext';\n\nexport default function useSorter() {\n  const { sort } = useAppState();\n  return React.useCallback((value: number) => (sort === 'older' ? value : -value), [sort]);\n}\n/** usage\n * const sorter = useSorter();\n * programs.sort((a, b) => sorter(a.week - b.week))\n */\n","import * as React from 'react';\nimport { graphql, navigate } from 'gatsby';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport SwipeableViews from 'react-swipeable-views';\nimport { virtualize, bindKeyboard, SlideRenderProps } from 'react-swipeable-views-utils';\nimport Layout from 'gatsby-theme-aoi/src/layout';\nimport Jumbotron from '../components/Jumbotron';\nimport LazyViewer from '../components/LazyViewer';\nimport { TuneCardSkeleton } from '../components/TuneCard';\nimport DrawerNavigation from '../components/DrawerNavigation';\nimport PageNavigation, { createNavigationProps } from '../components/PageNavigation';\nimport NavigationBox from '../components/NavigationBox';\nimport sortArtists from '../utils/sortByYomi';\nimport { useAllArtists } from '../utils/graphql-hooks/';\nimport { ArtistTemplateQuery, Program, ProgramPlaylist } from '../../graphql-types';\n\nconst VirtualizedSwipeableViews = bindKeyboard(virtualize(SwipeableViews));\n\ninterface Artist {\n  fieldValue: string;\n  edges: Program[];\n  tunes: ProgramPlaylist[];\n  img?: string;\n}\n\ninterface Props {\n  data: ArtistTemplateQuery;\n  pageContext: {\n    fieldValue: string;\n    previous?: Artist;\n    next?: Artist;\n    current: Artist;\n    index: number;\n  };\n}\n\nfunction ArtistTemplate({ data, pageContext }: Props) {\n  const allArtists = useAllArtists();\n  const artists = React.useMemo(() => sortArtists(allArtists), [allArtists]);\n  const { previous, next, index, fieldValue } = pageContext;\n  const programs = data.allProgram.edges;\n  const [loading, setLoading] = React.useState(false);\n  const [tab, setTab] = React.useState(index);\n  const _onChangeIndex = (i: number) => {\n    setTab(i);\n  };\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      if (tab !== index) {\n        setLoading(true);\n        navigate(`/artist/${artists[tab].fieldValue}`);\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [tab, artists, index]);\n\n  function slideRenderer({ index, key }: SlideRenderProps) {\n    const item = artists[index];\n    return (\n      <div key={key}>\n        <Jumbotron title={item.fieldValue} subtitle={`登場回: ${item.edges.length} 曲数: ${item.tunes.length}`} imgUrl={item.img} />\n        <Container maxWidth=\"md\">\n          <Box pt={4}>\n            {item.fieldValue === fieldValue ? (\n              <div>\n                <LazyViewer programs={programs.map(({ node }) => node)} filter={(tune) => tune.artist === fieldValue} />\n                <PageNavigation {...createNavigationProps(previous, next, '/artist')} />\n                <NavigationBox />\n              </div>\n            ) : (\n              <div>\n                <Box py={2}>\n                  <Typography variant=\"subtitle2\">\n                    <Skeleton variant=\"text\" width={100} />\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    <Skeleton variant=\"text\" />\n                  </Typography>\n                  <TuneCardSkeleton />\n                </Box>\n              </div>\n            )}\n          </Box>\n        </Container>\n      </div>\n    );\n  }\n\n  return (\n    <Layout\n      title={fieldValue}\n      disableGutters\n      disablePaddingTop\n      loading={loading}\n      maxWidth={false}\n      componentViewports={{ BottomNav: false }}\n      drawerContents={<DrawerNavigation {...createNavigationProps(previous, next, '/artist')} />}\n    >\n      <VirtualizedSwipeableViews\n        index={tab}\n        onChangeIndex={_onChangeIndex}\n        slideRenderer={slideRenderer}\n        slideCount={artists.length}\n        resistance\n      />\n    </Layout>\n  );\n}\n\nexport default ArtistTemplate;\n\nexport const query = graphql`\n  query ArtistTemplate($fieldValue: String!) {\n    allProgram(filter: { playlist: { elemMatch: { artist: { glob: $fieldValue } } } }, sort: { fields: week, order: ASC }) {\n      edges {\n        node {\n          id\n          title\n          date(formatString: \"YYYY-MM-DD\")\n          categories\n          fields {\n            slug\n          }\n          guests\n          subtitle\n          week\n          year\n          playlist {\n            artist\n            corner\n            id\n            indexInWeek\n            index\n            kana\n            label\n            name\n            nation\n            producer\n            selector\n            title\n            week\n            year\n            youtube\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}