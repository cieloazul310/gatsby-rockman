{"version":3,"sources":["webpack:///./src/utils/graphql-hooks/useProgramTop25.tsx","webpack:///./src/pages/categories.tsx","webpack:///./src/utils/graphql-hooks/useAllPrograms.tsx","webpack:///./src/utils/graphql-hooks/index.tsx","webpack:///./node_modules/@material-ui/core/esm/colors/purple.js","webpack:///./node_modules/@material-ui/core/esm/colors/lime.js","webpack:///./src/utils/getNationColor.ts","webpack:///./src/utils/graphql-hooks/useAllNations.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","webpack:///./src/utils/graphql-hooks/useTunesTop25.tsx","webpack:///./node_modules/gatsby-theme-aoi/src/components/ListItemLink.tsx","webpack:///./src/components/ProgramItem.tsx","webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx"],"names":["useProgramTop25","data","useStaticQuery","React","allArtist","edges","BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","CategoriesPage","location","useLocation","hash","state","categories","useAllCategories","fieldValues","map","fieldValue","initialCategory","decodeURI","slice","initialValue","indexOf","category","tab","setTab","sorter","useSorter","window","history","replaceState","scrollTo","title","tabSticky","disableGutters","disablePaddingTop","componentViewports","BottomNav","tabs","value","onChange","event","newValue","variant","scrollButtons","aria-label","d","index","key","label","length","onChangeIndex","resistance","footer","sort","a","b","node","week","i","id","program","last","useAllPrograms","allProgram","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","colorScheme","JPN","blue","UK","orange","US","green","FR","purple","CAN","red","AUS","lime","schemeNations","Object","keys","isSchemeNations","nation","includes","getNationColor","isDark","grey","useAllNations","group","totalCount","tunesCount","reduce","accum","curr","localeCompare","ListItemAvatar","props","ref","classes","className","other","context","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","marginTop","name","ListItemLink","color","button","inset","to","primaryText","secondaryText","avatar","secondaryAction","useMediaQuery","theme","breakpoints","down","ListItem","component","GatsbyLink","ListItemText","primary","secondary","ListItemSecondaryAction","AppLink","ProgramItem","useAvatarStyles","Avatar","src","fields","image","undefined","slug","date","divider","useAllArtists"],"mappings":"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","file":"component---src-pages-categories-tsx-5b56a5059ce03f51c3d7.js","sourcesContent":["import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { ProgramCountQuery } from '../../../graphql-types';\n\nexport function useProgramTop25() {\n  const data = useStaticQuery<ProgramCountQuery>(graphql`\n    query ProgramCount {\n      allArtist(sort: { fields: programCount, order: DESC }, limit: 25, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n","import * as React from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport { useLocation, WindowLocation } from '@reach/router';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from 'gatsby-theme-aoi/src/layouts/TabPageLayout';\nimport TabPane from '../layout/TabPane';\nimport Section, { SectionDivider } from '../components/Section';\nimport ProgramItem from '../components/ProgramItem';\nimport Jumbotron from '../components/Jumbotron';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\nimport useSorter from '../utils/useSorter';\nimport { useAllCategories } from '../utils/graphql-hooks';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\nfunction CategoriesPage() {\n  const location = useLocation() as WindowLocation<{\n    category?: string;\n  }>;\n  const { hash, state } = location;\n  const categories = useAllCategories();\n  const fieldValues = categories.map(({ fieldValue }) => fieldValue);\n  const initialCategory = hash !== '' ? decodeURI(hash.slice(1)) : null;\n  // @TODO: add Hash support\n  const initialValue =\n    fieldValues.indexOf(initialCategory) >= 0\n      ? fieldValues.indexOf(initialCategory)\n      : state?.category\n      ? fieldValues.indexOf(state.category)\n      : 0;\n  const [tab, setTab] = React.useState(initialValue);\n  const sorter = useSorter();\n  const _handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setTab(newValue);\n  };\n  const _handleChangeIndex = (index: number) => {\n    setTab(index);\n  };\n  React.useEffect(() => {\n    if (window && typeof window === 'object') window.history.replaceState(tab, '', `#${categories[tab].fieldValue}`);\n  }, [tab, categories]);\n  React.useEffect(() => {\n    if (typeof window === 'object') {\n      window.scrollTo(0, 0);\n    }\n  }, [tab]);\n\n  return (\n    <Layout\n      title={categories[tab]?.fieldValue ?? 'Category'}\n      tabSticky\n      disableGutters\n      disablePaddingTop\n      componentViewports={{ BottomNav: false }}\n      tabs={\n        <Tabs value={tab} onChange={_handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          {categories.map((d, index) => (\n            <Tab key={d.fieldValue ?? index} label={`${d.fieldValue} ${d.edges.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={tab} onChangeIndex={_handleChangeIndex} resistance>\n        {categories.map((d, index) => (\n          <TabPane key={index} value={tab} index={index} disableGutters>\n            <Jumbotron title={fieldValues[tab]} footer={`全${d.edges.length}回`} />\n            <Section>\n              <List>\n                {d.edges\n                  .sort((a, b) => sorter(a.node.week && b.node.week ? a.node.week - b.node.week : 0))\n                  .map(({ node }, i) => (\n                    <ProgramItem key={node.id} program={node} last={i === d.edges.length - 1} />\n                  ))}\n              </List>\n            </Section>\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllProgramQuery } from '../../../graphql-types';\n\nexport function useAllPrograms() {\n  const data = useStaticQuery<AllProgramQuery>(graphql`\n    query AllProgram {\n      allProgram(sort: { fields: week, order: ASC }) {\n        edges {\n          node {\n            id\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            fields {\n              slug\n              image\n            }\n            guests\n            playlist {\n              artist {\n                name\n              }\n              corner\n              id\n              indexInWeek\n              index\n              kana\n              label\n              nation\n              producer\n              selector\n              title\n              week\n              year\n              youtube\n            }\n            subtitle\n            week\n            year\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.edges.map(({ node }) => node);\n  }, [data.allProgram.edges]);\n}\n","export * from './useAllPrograms';\nexport * from './useAllTunes';\nexport * from './useAllArtists';\nexport * from './useAllCategories';\nexport * from './useAllSelectors';\nexport * from './useAllNations';\nexport * from './useAllYears';\nexport * from './useProgramTop25';\nexport * from './useTunesTop25';\n","var purple = {\n  50: '#f3e5f5',\n  100: '#e1bee7',\n  200: '#ce93d8',\n  300: '#ba68c8',\n  400: '#ab47bc',\n  500: '#9c27b0',\n  600: '#8e24aa',\n  700: '#7b1fa2',\n  800: '#6a1b9a',\n  900: '#4a148c',\n  A100: '#ea80fc',\n  A200: '#e040fb',\n  A400: '#d500f9',\n  A700: '#aa00ff'\n};\nexport default purple;","var lime = {\n  50: '#f9fbe7',\n  100: '#f0f4c3',\n  200: '#e6ee9c',\n  300: '#dce775',\n  400: '#d4e157',\n  500: '#cddc39',\n  600: '#c0ca33',\n  700: '#afb42b',\n  800: '#9e9d24',\n  900: '#827717',\n  A100: '#f4ff81',\n  A200: '#eeff41',\n  A400: '#c6ff00',\n  A700: '#aeea00'\n};\nexport default lime;","import * as React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { blue, orange, green, red, purple, lime, grey } from '@material-ui/core/colors';\n\nconst colorScheme = {\n  JPN: blue,\n  UK: orange,\n  US: green,\n  FR: purple,\n  CAN: red,\n  AUS: lime,\n};\n\nexport type SchemeNations = keyof typeof colorScheme;\nexport const schemeNations = Object.keys(colorScheme);\nexport function isSchemeNations(nation: string): nation is SchemeNations {\n  return schemeNations.includes(nation);\n}\n\nexport default function getNationColor(nation: string, isDark = false) {\n  if (isSchemeNations(nation)) {\n    return isDark ? colorScheme[nation][300] : colorScheme[nation][500];\n  } else {\n    return grey[500];\n  }\n}\n\nexport function useGetNationColor() {\n  const isDark = useTheme().palette.type === 'dark';\n  return React.useCallback((nation: string) => getNationColor(nation, isDark), [isDark]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { isSchemeNations } from '../getNationColor';\nimport { AllNationsQuery } from '../../../graphql-types';\n\nexport function useAllNations() {\n  const { group } = useStaticQuery<AllNationsQuery>(graphql`\n    query AllNations {\n      allArtist(filter: { name: { ne: \"スピッツ\" } }) {\n        group(field: nation) {\n          fieldValue\n          totalCount\n          edges {\n            node {\n              tunesCount\n            }\n          }\n        }\n      }\n    }\n  `).allArtist;\n\n  return React.useMemo(() => {\n    return group\n      .map(({ fieldValue, totalCount, edges }) => ({\n        nation: fieldValue,\n        totalCount,\n        tunesCount: edges.reduce((accum, curr) => accum + curr.node.tunesCount, 0),\n      }))\n      .sort((a, b) => b.totalCount - a.totalCount || (a.nation ?? '').localeCompare(b.nation ?? ''));\n  }, [group]);\n}\n\nexport function useSchemeNations() {\n  const allNations = useAllNations();\n  return React.useMemo(() => {\n    const schemed = allNations.filter(({ nation }) => isSchemeNations(nation ?? ''));\n    const notSchemed = allNations\n      .filter(({ nation }) => !isSchemeNations(nation ?? ''))\n      .reduce(\n        (accum, curr) => ({\n          ...accum,\n          totalCount: accum.totalCount + curr.totalCount,\n          tunesCount: accum.tunesCount + curr.tunesCount,\n        }),\n        { nation: 'others', totalCount: 0, tunesCount: 0 }\n      );\n    return [...schemed, notSchemed];\n  }, [allNations]);\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { TunesCountQuery } from '../../../graphql-types';\n\nexport function useTunesTop25() {\n  const data = useStaticQuery<TunesCountQuery>(graphql`\n    query TunesCount {\n      allArtist(sort: { fields: tunesCount, order: DESC }, limit: 25, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n","import * as React from 'react';\nimport { Link as GatsbyLink, GatsbyLinkProps } from 'gatsby';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { LinkProps as MuiLinkProps } from '@material-ui/core/Link';\nimport { Theme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppLink from './AppLink';\n\ntype ListItemLinkProps<T = Record<string, unknown>> = Omit<ListItemProps, 'ref'> &\n  Pick<MuiLinkProps, 'color'> & {\n    to: string;\n    primaryText: string;\n    secondaryText?: string;\n    inset?: boolean;\n    avatar?: JSX.Element;\n    secondaryAction?: JSX.Element;\n  } & Omit<GatsbyLinkProps<T>, 'ref' | 'button'>;\n\nfunction ListItemLink({\n  color = 'inherit',\n  button = false,\n  inset = false,\n  to,\n  primaryText,\n  secondaryText,\n  avatar,\n  secondaryAction,\n  ...props\n}: ListItemLinkProps) {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('xs'));\n\n  return isMobile || button ? (\n    <ListItem component={GatsbyLink} to={to} button {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText primary={primaryText} secondary={secondaryText} inset={inset} />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  ) : (\n    <ListItem {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText\n        inset={inset}\n        primary={\n          <AppLink to={to} color={color}>\n            {primaryText}\n          </AppLink>\n        }\n        secondary={secondaryText || null}\n      />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  );\n}\nexport default ListItemLink;\n","import * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport { useAvatarStyles } from '../styles';\nimport { Maybe, Program } from '../../graphql-types';\n\ninterface Props {\n  program: Maybe<Pick<Program, 'fields' | 'title' | 'week' | 'date'>>;\n  last?: boolean;\n}\n\nfunction ProgramItem({ program, last }: Props) {\n  const classes = useAvatarStyles();\n  return (\n    <ListItemLink\n      avatar={<Avatar className={classes.avatar} src={program?.fields?.image ?? undefined} variant=\"square\" />}\n      to={program?.fields?.slug ?? '#'}\n      primaryText={program?.title ?? 'タイトル'}\n      secondaryText={`第${program?.week}回 ${program?.date}`}\n      divider={!last}\n      inset\n    />\n  );\n}\n\nexport default ProgramItem;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllArtistsQuery } from '../../../graphql-types';\n\nexport function useAllArtists() {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allArtist(sort: { fields: sortName, order: ASC }, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n            program {\n              date(formatString: \"YYYY-MM-DD\")\n              week\n            }\n            tunes {\n              title\n              year\n              week\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n\nexport type ArtistItem = ReturnType<typeof useAllArtists>[number];\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n                image\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.edges.length - a.edges.length);\n  }, [data]);\n}\n\nexport function useCategories(fieldValues: string[]) {\n  const categories = useAllCategories();\n  return React.useMemo(() => {\n    return categories.filter((category) => category.fieldValue && fieldValues.includes(category.fieldValue));\n  }, [fieldValues, categories]);\n}\n"],"sourceRoot":""}