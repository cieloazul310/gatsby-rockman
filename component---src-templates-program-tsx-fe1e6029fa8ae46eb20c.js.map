{"version":3,"sources":["webpack:///./src/templates/program.tsx","webpack:///./src/utils/removeMultiple.ts"],"names":["BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","ProgramTemplate","data","pageContext","previous","next","initialIndex","artists","program","playlist","removeMultiple","map","tune","artist","item","name","tabs","key","title","id","variant","filter","element","Boolean","drawerContents","index","onChangeIndex","fields","slug","navigate","resistance","arr","getVal","vals","set","Set","Array","from","val","indexOf"],"mappings":"8FAAA,wMAiBMA,EAA6BC,uBAAaC,KAgEjCC,UAzDf,YAAuD,YAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YACvBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KACZC,EAAeF,EAAW,EAAI,EAU9BG,EAAU,UAAAL,EAAKM,eAAL,SAAcC,SAC1BC,YACER,EAAKM,QAAQC,SAASE,KAAI,SAACC,GAAD,OAAUA,aAAV,EAAUA,EAAMC,WAC1C,SAACC,GAAD,OAAUA,aAAV,EAAUA,EAAMC,QAElB,GAEEC,EAAO,CACXZ,EAAW,gBAAC,IAAD,CAAoBa,IAAKb,EAASc,MAAOJ,KAAMV,IAAe,KACzE,uBAAKa,IAAI,QACP,gBAAC,IAAD,CAAmBT,QAASN,EAAKM,UACjC,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,qCACGN,EAAKM,eADR,iBACG,EAAcC,gBADjB,aACG,EAAwBE,KAAI,SAACC,GAAD,OAC3B,gBAAC,IAAD,CAAMK,IAAKL,aAAF,EAAEA,EAAMO,GAAIP,KAAMA,SAIjC,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAqBM,MAAM,WAAWX,QAASA,KAEjD,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAgBa,QAAQ,UAAUjB,YAAaA,MAGnDE,EAAO,gBAAC,IAAD,CAAoBY,IAAKZ,EAAKa,MAAOJ,KAAMT,IAAW,MAC7DgB,QAAO,SAACC,GAAD,OAAqCC,QAAQD,MACtD,OACE,gBAAC,IAAD,CAAQJ,MAAK,UAAEhB,EAAKM,eAAP,aAAE,EAAcU,MAAOM,eAAgB,gBAAC,IAAD,CAAkBrB,YAAaA,EAAaiB,QAAQ,aACtG,gBAACtB,EAAD,CAA4B2B,MAAOnB,EAAcoB,cA3C3B,SAACD,GAAkB,QACvCA,IAAUnB,IACVD,SAAQA,GAAJ,UAAIA,EAAMsB,cAAV,OAAI,EAAcC,MAAQH,IAAUnB,EAAe,GACzDuB,mBAASxB,EAAKsB,OAAOC,MAEnBxB,SAAYA,GAAJ,UAAIA,EAAUuB,cAAd,OAAI,EAAkBC,MAAQH,IAAUnB,EAAe,GACjEuB,mBAASzB,EAASuB,OAAOC,QAqC0DE,YAAU,GAC1Fd,GAEH,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,U,kCC3ED,SAASN,EAAkBqB,EAAUC,GAC1C,IAAMC,EAAOF,EAAIpB,IAAIqB,GACfE,EAAM,IAAIC,IAAIF,GACpB,OAAOG,MAAMC,KAAKH,GAAKvB,KAAI,SAAC2B,GAAD,OAASP,EAAIE,EAAKM,QAAQD,OAHvD","file":"component---src-templates-program-tsx-fe1e6029fa8ae46eb20c.js","sourcesContent":["import * as React from 'react';\nimport { graphql, navigate } from 'gatsby';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from '../layout';\nimport Section, { SectionDivider } from '../components/Section';\nimport { ProgramPageHeader } from '../components/PageHeader';\nimport Tune from '../components/Tune';\nimport ArtistItemContainer from '../components/ArtistItemContainer';\nimport PageNavigation from '../components/PageNavigation';\nimport DrawerNavigation from '../components/DrawerNavigation';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\nimport { ProgramTonarinoTab } from '../components/TonarinoTab';\nimport { removeMultiple } from '../utils/removeMultiple';\nimport { ProgramTemplateQuery, SitePageContext } from '../../graphql-types';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\ninterface Props {\n  data: ProgramTemplateQuery;\n  pageContext: SitePageContext;\n}\n\nfunction ProgramTemplate({ data, pageContext }: Props) {\n  const { previous, next } = pageContext;\n  const initialIndex = previous ? 1 : 0;\n  const handleChangeIndex = (index: number) => {\n    if (index === initialIndex) return;\n    if (next && next?.fields?.slug && index === initialIndex + 1) {\n      navigate(next.fields.slug);\n    }\n    if (previous && previous?.fields?.slug && index === initialIndex - 1) {\n      navigate(previous.fields.slug);\n    }\n  };\n  const artists = data.program?.playlist\n    ? removeMultiple(\n        data.program.playlist.map((tune) => tune?.artist),\n        (item) => item?.name\n      )\n    : [];\n\n  const tabs = [\n    previous ? <ProgramTonarinoTab key={previous.title} item={previous} /> : null,\n    <div key=\"main\">\n      <ProgramPageHeader program={data.program} />\n      <SectionDivider />\n      <Section>\n        <div>\n          {data.program?.playlist?.map((tune) => (\n            <Tune key={tune?.id} tune={tune} />\n          ))}\n        </div>\n      </Section>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <ArtistItemContainer title=\"登場アーティスト\" artists={artists} />\n      </Section>\n      <SectionDivider />\n      <Section>\n        <PageNavigation variant=\"program\" pageContext={pageContext} />\n      </Section>\n    </div>,\n    next ? <ProgramTonarinoTab key={next.title} item={next} /> : null,\n  ].filter((element): element is JSX.Element => Boolean(element));\n  return (\n    <Layout title={data.program?.title} drawerContents={<DrawerNavigation pageContext={pageContext} variant=\"program\" />}>\n      <BindKeyboardSwipeableViews index={initialIndex} onChangeIndex={handleChangeIndex} resistance>\n        {tabs}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n}\n\nexport default ProgramTemplate;\n\nexport const query = graphql`\n  query ProgramTemplate($slug: String!) {\n    program(fields: { slug: { eq: $slug } }) {\n      id\n      date(formatString: \"YYYY-MM-DD\")\n      subtitle\n      title\n      week\n      year\n      guests\n      categories\n      fields {\n        image\n      }\n      playlist {\n        artist {\n          name\n          image\n          programCount\n          tunesCount\n        }\n        corner\n        id\n        index\n        indexInWeek\n        label\n        kana\n        nation\n        selector\n        title\n        year\n        week\n        youtube\n      }\n    }\n  }\n`;\n","export function removeMultiple<T>(arr: T[], getVal: (item: T) => unknown): T[] {\n  const vals = arr.map(getVal);\n  const set = new Set(vals);\n  return Array.from(set).map((val) => arr[vals.indexOf(val)]);\n}\n"],"sourceRoot":""}