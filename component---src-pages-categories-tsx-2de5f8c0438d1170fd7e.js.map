{"version":3,"sources":["webpack:///./src/utils/graphql-hooks/useProgramTop25.tsx","webpack:///./src/pages/categories.tsx","webpack:///./src/components/Jumbotron.tsx","webpack:///./src/utils/graphql-hooks/useAllPrograms.tsx","webpack:///./src/utils/useSorter.tsx","webpack:///./src/layout/TabPane.tsx","webpack:///./src/utils/graphql-hooks/index.tsx","webpack:///./node_modules/@material-ui/core/esm/colors/purple.js","webpack:///./node_modules/@material-ui/core/esm/colors/lime.js","webpack:///./src/utils/getNationColor.ts","webpack:///./src/utils/graphql-hooks/useAllSelectors.tsx","webpack:///./src/utils/graphql-hooks/useAllNations.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","webpack:///./src/utils/graphql-hooks/useTunesTop25.tsx","webpack:///./node_modules/gatsby-theme-aoi/src/components/ListItemLink.tsx","webpack:///./src/components/ProgramItem.tsx","webpack:///./node_modules/gatsby-theme-aoi/src/layouts/TabPageLayout/index.tsx","webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/layout/TabLayout.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx"],"names":["useProgramTop25","data","useStaticQuery","React","allArtist","edges","BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","CategoriesPage","location","useLocation","hash","state","categories","useAllCategories","fieldValues","map","fieldValue","initialCategory","decodeURI","slice","initialValue","indexOf","category","tab","setTab","sortProgramNode","useSortProgramNode","window","history","replaceState","scrollTo","title","tabs","value","onChange","event","newValue","variant","scrollButtons","aria-label","d","index","key","label","length","onChangeIndex","resistance","animateHeight","disableGutters","footer","sort","i","node","id","program","last","useStyles","makeStyles","theme","createStyles","root","height","overflow","position","jumbotronBg","image","backgroundColor","palette","type","grey","secondary","light","backgroundImage","undefined","backgroundPosition","backgroundSize","filter","transform","jumbotronText","color","display","flexDirection","justifyContent","zIndex","padding","spacing","breakpoints","down","jumbotronTitle","fontWeight","Jumbotron","header","classes","className","component","gutterBottom","useAllPrograms","allProgram","useSorter","useAppState","useSortProgram","sorter","a","b","week","TabPane","children","props","role","hidden","aria-labelledby","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","colorScheme","JPN","blue","UK","orange","US","green","FR","purple","CAN","red","AUS","lime","schemeNations","Object","keys","isSchemeNations","nation","includes","getNationColor","isDark","useAllSelectors","group","reduce","accum","curr","removeMultiple","playlist","tune","selector","useAllNations","totalCount","tunesCount","localeCompare","ListItemAvatar","ref","other","context","alignItems","alignItemsFlexStart","minWidth","flexShrink","marginTop","name","ListItemLink","button","inset","to","primaryText","secondaryText","avatar","secondaryAction","useMediaQuery","ListItem","GatsbyLink","ListItemText","primary","ListItemSecondaryAction","AppLink","ProgramItem","useAvatarStyles","Avatar","src","fields","slug","date","divider","TabPageLayout","maxWidth","disablePaddingTop","useAllArtists","TabLayout","tabSticky","componentViewports","BottomNav"],"mappings":"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","file":"component---src-pages-categories-tsx-2de5f8c0438d1170fd7e.js","sourcesContent":["import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { ProgramCountQuery } from '../../../graphql-types';\n\nexport function useProgramTop25() {\n  const data = useStaticQuery<ProgramCountQuery>(graphql`\n    query ProgramCount {\n      allArtist(sort: { fields: programCount, order: DESC }, limit: 25, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n","import * as React from 'react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport List from '@material-ui/core/List';\nimport { useLocation, WindowLocation } from '@reach/router';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from '../layout/TabLayout';\nimport TabPane from '../layout/TabPane';\nimport Section, { SectionDivider } from '../components/Section';\nimport ProgramItem from '../components/ProgramItem';\nimport Jumbotron from '../components/Jumbotron';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\nimport { useSortProgramNode } from '../utils/useSorter';\nimport { useAllCategories } from '../utils/graphql-hooks';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\nfunction CategoriesPage() {\n  const location = useLocation() as WindowLocation<{\n    category?: string;\n  }>;\n  const { hash, state } = location;\n  const categories = useAllCategories();\n  const fieldValues = categories.map(({ fieldValue }) => fieldValue);\n  const initialCategory = hash !== '' ? decodeURI(hash.slice(1)) : null;\n  // @TODO: add Hash support\n  const initialValue =\n    fieldValues.indexOf(initialCategory) >= 0\n      ? fieldValues.indexOf(initialCategory)\n      : state?.category\n      ? fieldValues.indexOf(state.category)\n      : 0;\n  const [tab, setTab] = React.useState(initialValue);\n  const sortProgramNode = useSortProgramNode();\n  const handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setTab(newValue);\n  };\n  const handleChangeIndex = (index: number) => {\n    setTab(index);\n  };\n  React.useEffect(() => {\n    if (window && typeof window === 'object') window.history.replaceState(tab, '', `#${categories[tab].fieldValue}`);\n  }, [tab, categories]);\n  React.useEffect(() => {\n    if (typeof window === 'object') {\n      window.scrollTo(0, 0);\n    }\n  }, [tab]);\n\n  return (\n    <Layout\n      title=\"テーマ\"\n      tabs={\n        <Tabs value={tab} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          {categories.map((d, index) => (\n            <Tab key={d.fieldValue ?? index} label={`${d.fieldValue} ${d.edges.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={tab} onChangeIndex={handleChangeIndex} resistance animateHeight>\n        {categories.map((d, index) => (\n          <TabPane key={index} value={tab} index={index} disableGutters>\n            <Jumbotron title={fieldValues[tab]} footer={`全${d.edges.length}回`} />\n            <Section>\n              <List>\n                {d.edges.sort(sortProgramNode).map(({ node }, i) => (\n                  <ProgramItem key={node.id} program={node} last={i === d.edges.length - 1} />\n                ))}\n              </List>\n            </Section>\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n","import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\ninterface StyleProps {\n  image?: string;\n}\nconst height = 240;\n\nconst useStyles = makeStyles<Theme, StyleProps>((theme: Theme) =>\n  createStyles({\n    root: {\n      height,\n      overflow: 'hidden',\n      position: 'relative',\n    },\n    jumbotronBg: ({ image }) => ({\n      height: '100%',\n      backgroundColor: !image && theme.palette.type === 'light' ? theme.palette.secondary.light : theme.palette.grey[700],\n      backgroundImage: image ? `url(${image})` : undefined,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      filter: image ? 'blur(6px) brightness(0.8)' : undefined,\n      transform: image ? 'scale(1.1)' : undefined,\n    }),\n    jumbotronText: {\n      height: height,\n      color: 'white',\n      position: 'absolute',\n      transform: 'translate(0, -100%)',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      zIndex: 2,\n      padding: theme.spacing(2, 4),\n      [theme.breakpoints.down('xs')]: {\n        padding: theme.spacing(2),\n      },\n    },\n    jumbotronTitle: {\n      fontWeight: 'bold',\n    },\n  })\n);\n\ninterface Props {\n  header?: React.ReactNode;\n  title: React.ReactNode;\n  footer?: React.ReactNode;\n  image?: string;\n}\n\nfunction Jumbotron({ header, footer, title, image }: Props) {\n  const classes = useStyles({ image });\n  return (\n    <div className={classes.root}>\n      <div className={classes.jumbotronBg} />\n      <div className={classes.jumbotronText}>\n        {header ? <Typography variant=\"subtitle2\">{header}</Typography> : null}\n        <Typography variant=\"h5\" component=\"h2\" className={classes.jumbotronTitle} gutterBottom>\n          {title}\n        </Typography>\n        {footer ? <Typography variant=\"subtitle2\">{footer}</Typography> : null}\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllProgramQuery } from '../../../graphql-types';\n\nexport function useAllPrograms() {\n  const data = useStaticQuery<AllProgramQuery>(graphql`\n    query AllProgram {\n      allProgram(sort: { fields: week, order: ASC }) {\n        edges {\n          node {\n            id\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            fields {\n              slug\n              image\n            }\n            guests\n            playlist {\n              artist {\n                name\n              }\n              corner\n              id\n              indexInWeek\n              index\n              kana\n              label\n              nation\n              producer\n              selector\n              title\n              week\n              year\n              youtube\n            }\n            subtitle\n            week\n            year\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.edges.map(({ node }) => node);\n  }, [data.allProgram.edges]);\n}\n","import * as React from 'react';\nimport { useAppState } from '../gatsby-theme-aoi-top-layout/utils/AppStateContext';\nimport { Maybe, Program, ProgramPlaylist } from '../../graphql-types';\n\n/** usage\n * const sorter = useSorter();\n * programs.sort((a, b) => sorter(a.week - b.week))\n */\nexport default function useSorter() {\n  const { sort } = useAppState();\n  return React.useCallback((value: number) => (sort === 'older' ? value : -value), [sort]);\n}\n\nexport function useSortProgram() {\n  const sorter = useSorter();\n  return (a: Maybe<Pick<Program, 'week'>> | undefined, b: Maybe<Pick<Program, 'week'>> | undefined) =>\n    sorter((a?.week ?? 0) - (b?.week ?? 0));\n}\n\nexport function useSortProgramNode() {\n  const sorter = useSorter();\n  return (a: { node: Maybe<Pick<Program, 'week'>> }, b: { node: Maybe<Pick<Program, 'week'>> }) =>\n    sorter((a?.node?.week ?? 0) - (b?.node?.week ?? 0));\n}\n\nexport function useSortPlaylist() {\n  const sorter = useSorter();\n  return (\n    a: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined,\n    b: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined\n  ) => sorter((a?.week ?? 0) - (b?.week ?? 0) || (a?.indexInWeek ?? 0) - (b?.indexInWeek ?? 0));\n}\n","import * as React from 'react';\nimport Container, { ContainerProps } from '@material-ui/core/Container';\n\ntype Props = {\n  // tab state value\n  value: number;\n  // this tab's index\n  index: number;\n  children: React.ReactNode;\n  visible?: boolean;\n} & ContainerProps;\n\nfunction TabPane({ index, value, children, ...props }: Props) {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index && value !== index + 1 && value !== index - 1}\n      id={`full-width-tabpanel-${index}`}\n      aria-labelledby={`full-width-tab-${index}`}\n    >\n      <Container {...props}>\n        <div>{value === index || value === index - 1 || value === index + 1 ? children : null}</div>\n      </Container>\n    </div>\n  );\n}\n\nexport default TabPane;\n","export * from './useAllPrograms';\nexport * from './useAllTunes';\nexport * from './useAllArtists';\nexport * from './useAllCategories';\nexport * from './useAllSelectors';\nexport * from './useAllNations';\nexport * from './useAllYears';\nexport * from './useProgramTop25';\nexport * from './useTunesTop25';\n","var purple = {\n  50: '#f3e5f5',\n  100: '#e1bee7',\n  200: '#ce93d8',\n  300: '#ba68c8',\n  400: '#ab47bc',\n  500: '#9c27b0',\n  600: '#8e24aa',\n  700: '#7b1fa2',\n  800: '#6a1b9a',\n  900: '#4a148c',\n  A100: '#ea80fc',\n  A200: '#e040fb',\n  A400: '#d500f9',\n  A700: '#aa00ff'\n};\nexport default purple;","var lime = {\n  50: '#f9fbe7',\n  100: '#f0f4c3',\n  200: '#e6ee9c',\n  300: '#dce775',\n  400: '#d4e157',\n  500: '#cddc39',\n  600: '#c0ca33',\n  700: '#afb42b',\n  800: '#9e9d24',\n  900: '#827717',\n  A100: '#f4ff81',\n  A200: '#eeff41',\n  A400: '#c6ff00',\n  A700: '#aeea00'\n};\nexport default lime;","import * as React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { blue, orange, green, red, purple, lime, grey } from '@material-ui/core/colors';\n\nconst colorScheme = {\n  JPN: blue,\n  UK: orange,\n  US: green,\n  FR: purple,\n  CAN: red,\n  AUS: lime,\n};\n\nexport type SchemeNations = keyof typeof colorScheme;\nexport const schemeNations = Object.keys(colorScheme);\nexport function isSchemeNations(nation: string): nation is SchemeNations {\n  return schemeNations.includes(nation);\n}\n\nexport default function getNationColor(nation: string, isDark = false) {\n  if (isSchemeNations(nation)) {\n    return isDark ? colorScheme[nation][300] : colorScheme[nation][500];\n  } else {\n    return grey[500];\n  }\n}\n\nexport function useGetNationColor() {\n  const isDark = useTheme().palette.type === 'dark';\n  return React.useCallback((nation: string) => getNationColor(nation, isDark), [isDark]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllSelectorsQuery } from '../../../graphql-types';\n\ntype SelectorsGroup = AllSelectorsQuery['allProgram']['group'][number];\ntype SelectorsEdge = SelectorsGroup['edges'][number];\ntype SelectorsPlaylist = NonNullable<SelectorsEdge['node']['playlist']>[number];\n\nexport interface CategoryItem {\n  fieldValue: string;\n  edges: SelectorsEdge[];\n  playlist: SelectorsPlaylist[];\n}\n\nexport function useAllSelectors(): CategoryItem[] {\n  const data = useStaticQuery<AllSelectorsQuery>(graphql`\n    query AllSelectors {\n      allProgram {\n        group(field: playlist___selector) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              date(formatString: \"YYYY-MM-DD\")\n              title\n              fields {\n                slug\n              }\n              playlist {\n                id\n                indexInWeek\n                title\n                artist {\n                  name\n                }\n                year\n                nation\n                selector\n                youtube\n                corner\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return React.useMemo(() => {\n    return data.allProgram.group\n      .filter((group) => group.fieldValue !== '草野マサムネ')\n      .map((group) => {\n        const edges = removeMultiple(group.edges);\n        return {\n          fieldValue: group.fieldValue ?? 'selector',\n          edges,\n          playlist: edges.reduce<SelectorsPlaylist[]>(\n            (accum, curr) =>\n              curr.node.playlist ? [...accum, ...curr.node.playlist.filter((tune) => tune?.selector === group.fieldValue)] : [...accum],\n            []\n          ),\n        };\n      })\n      .sort((a, b) => b.playlist.length - a.playlist.length || b.edges.length - a.edges.length);\n  }, [data]);\n}\n\nfunction removeMultiple(edges: SelectorsEdge[]) {\n  return edges.reduce<SelectorsEdge[]>((accum, curr) => {\n    if (accum.map((d) => d.node.id).indexOf(curr.node.id) >= 0) return accum;\n    return [...accum, curr];\n  }, []);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { isSchemeNations } from '../getNationColor';\nimport { AllNationsQuery } from '../../../graphql-types';\n\nexport function useAllNations() {\n  const { group } = useStaticQuery<AllNationsQuery>(graphql`\n    query AllNations {\n      allArtist(filter: { name: { ne: \"スピッツ\" } }) {\n        group(field: nation) {\n          fieldValue\n          totalCount\n          edges {\n            node {\n              tunesCount\n            }\n          }\n        }\n      }\n    }\n  `).allArtist;\n\n  return React.useMemo(() => {\n    return group\n      .map(({ fieldValue, totalCount, edges }) => ({\n        nation: fieldValue,\n        totalCount,\n        tunesCount: edges.reduce((accum, curr) => accum + curr.node.tunesCount, 0),\n      }))\n      .sort((a, b) => b.totalCount - a.totalCount || (a.nation ?? '').localeCompare(b.nation ?? ''));\n  }, [group]);\n}\n\nexport function useSchemeNations() {\n  const allNations = useAllNations();\n  return React.useMemo(() => {\n    const schemed = allNations.filter(({ nation }) => isSchemeNations(nation ?? ''));\n    const notSchemed = allNations\n      .filter(({ nation }) => !isSchemeNations(nation ?? ''))\n      .reduce(\n        (accum, curr) => ({\n          ...accum,\n          totalCount: accum.totalCount + curr.totalCount,\n          tunesCount: accum.tunesCount + curr.tunesCount,\n        }),\n        { nation: 'others', totalCount: 0, tunesCount: 0 }\n      );\n    return [...schemed, notSchemed];\n  }, [allNations]);\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { TunesCountQuery } from '../../../graphql-types';\n\nexport function useTunesTop25() {\n  const data = useStaticQuery<TunesCountQuery>(graphql`\n    query TunesCount {\n      allArtist(sort: { fields: tunesCount, order: DESC }, limit: 25, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n","import * as React from 'react';\nimport { Link as GatsbyLink, GatsbyLinkProps } from 'gatsby';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { LinkProps as MuiLinkProps } from '@material-ui/core/Link';\nimport { Theme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppLink from './AppLink';\n\ntype ListItemLinkProps<T = Record<string, unknown>> = Omit<ListItemProps, 'ref'> &\n  Pick<MuiLinkProps, 'color'> & {\n    to: string;\n    primaryText: string;\n    secondaryText?: string;\n    inset?: boolean;\n    avatar?: JSX.Element;\n    secondaryAction?: JSX.Element;\n  } & Omit<GatsbyLinkProps<T>, 'ref' | 'button'>;\n\nfunction ListItemLink({\n  color = 'inherit',\n  button = false,\n  inset = false,\n  to,\n  primaryText,\n  secondaryText,\n  avatar,\n  secondaryAction,\n  ...props\n}: ListItemLinkProps) {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('xs'));\n\n  return isMobile || button ? (\n    <ListItem component={GatsbyLink} to={to} button {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText primary={primaryText} secondary={secondaryText} inset={inset} />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  ) : (\n    <ListItem {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText\n        inset={inset}\n        primary={\n          <AppLink to={to} color={color}>\n            {primaryText}\n          </AppLink>\n        }\n        secondary={secondaryText || null}\n      />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  );\n}\nexport default ListItemLink;\n","import * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport { useAvatarStyles } from '../styles';\nimport { Maybe, Program } from '../../graphql-types';\n\ninterface Props {\n  program: Maybe<Pick<Program, 'fields' | 'title' | 'week' | 'date'>>;\n  last?: boolean;\n}\n\nfunction ProgramItem({ program, last }: Props) {\n  const classes = useAvatarStyles();\n  return (\n    <ListItemLink\n      avatar={<Avatar className={classes.avatar} src={program?.fields?.image ?? undefined} variant=\"square\" />}\n      to={program?.fields?.slug ?? '#'}\n      primaryText={program?.title ?? 'タイトル'}\n      secondaryText={`第${program?.week}回 ${program?.date}`}\n      divider={!last}\n      inset\n    />\n  );\n}\n\nexport default ProgramItem;\n","import * as React from 'react';\nimport Layout, { LayoutProps } from '../../layout';\n\ninterface Props extends LayoutProps {\n  tabSticky?: boolean;\n}\n\nfunction TabPageLayout({ children, maxWidth = 'xl', disablePaddingTop = true, disableGutters = true, ...props }: Props) {\n  return (\n    <Layout maxWidth={maxWidth} disablePaddingTop={disablePaddingTop} disableGutters={disableGutters} {...props}>\n      {children}\n    </Layout>\n  );\n}\n\nexport default TabPageLayout;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllArtistsQuery } from '../../../graphql-types';\n\nexport function useAllArtists() {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allArtist(sort: { fields: sortName, order: ASC }, filter: { name: { ne: \"スピッツ\" } }) {\n        edges {\n          node {\n            id\n            image\n            kana\n            name\n            nation\n            programCount\n            tunesCount\n            program {\n              date(formatString: \"YYYY-MM-DD\")\n              week\n            }\n            tunes {\n              title\n              year\n              week\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => data.allArtist.edges, [data]);\n}\n\nexport type ArtistItem = ReturnType<typeof useAllArtists>[number];\n","import * as React from 'react';\nimport Layout from 'gatsby-theme-aoi/src/layouts/TabPageLayout';\nimport { LayoutProps } from 'gatsby-theme-aoi/src/layout';\n\nfunction TabLayout({\n  children,\n  tabs,\n  ...props\n}: Omit<LayoutProps, 'tabSticky' | 'disableGutters' | 'componentViewports' | 'tabs'> & Required<Pick<LayoutProps, 'tabs'>>) {\n  return (\n    <Layout tabSticky disableGutters componentViewports={{ BottomNav: false }} {...props} tabs={tabs}>\n      {children}\n    </Layout>\n  );\n}\n\nexport default TabLayout;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n                image\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.edges.length - a.edges.length);\n  }, [data]);\n}\n\nexport function useCategories(fieldValues: string[]) {\n  const categories = useAllCategories();\n  return React.useMemo(() => {\n    return categories.filter((category) => category.fieldValue && fieldValues.includes(category.fieldValue));\n  }, [fieldValues, categories]);\n}\n"],"sourceRoot":""}