{"version":3,"sources":["webpack:///./src/utils/useSorter.tsx","webpack:///./src/templates/artist.tsx"],"names":["useSorter","sort","useAppState","React","value","useSortProgram","sorter","a","b","week","useSortProgramNode","node","BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","ArtistTemplate","data","pageContext","previous","next","sortProgram","initialIndex","programs","artist","program","map","playlist","tunes","filter","tune","tabs","key","name","item","indicatorColor","centered","label","title","artists","relatedArtists","variant","element","Boolean","drawerContents","index","onChangeIndex","navigate","resistance"],"mappings":"4FAAA,kIAQe,SAASA,IAAY,IAC1BC,EAASC,cAATD,KACR,OAAOE,eAAkB,SAACC,GAAD,MAA6B,UAATH,EAAmBG,GAASA,IAAQ,CAACH,IAG7E,SAASI,IACd,IAAMC,EAASN,IACf,OAAO,SAACO,EAA6CC,GAA9C,eACLF,GAAO,UAACC,aAAD,EAACA,EAAGE,YAAJ,QAAY,IAAZ,UAAkBD,aAAlB,EAAkBA,EAAGC,YAArB,QAA6B,KAGjC,SAASC,IACd,IAAMJ,EAASN,IACf,OAAO,SAACO,EAA2CC,GAA5C,mBACLF,GAAO,UAACC,SAAD,UAACA,EAAGI,YAAJ,aAAC,EAASF,YAAV,QAAkB,IAAlB,UAAwBD,SAAxB,UAAwBA,EAAGG,YAA3B,aAAwB,EAASF,YAAjC,QAAyC,O,kCCtBpD,gOAmBMG,EAA6BC,uBAAaC,KAmEjCC,UA5Df,YAAsD,YAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YACtBC,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KACZC,EAAcf,cACdgB,EAAeH,EAAW,EAAI,EAU9BI,EAAQ,UAAGN,EAAKO,cAAR,iBAAG,EAAaC,eAAhB,aAAG,EAAsBC,KAAI,SAACD,GAAD,gCACtCA,EADsC,CAEzCE,SAAQ,UAAEV,EAAKO,cAAP,iBAAE,EAAaI,aAAf,aAAE,EAAoBC,QAAO,SAACC,GAAD,OAAUA,aAAA,EAAAA,EAAMpB,SAASe,aAAf,EAAeA,EAASf,cAEnEqB,EAAO,CACXZ,EAAW,gBAAC,IAAD,CAAmBa,IAAKb,aAAF,EAAEA,EAAUc,KAAMC,KAAMf,IAAe,KACxE,uBAAKa,IAAI,QACP,gBAAC,IAAD,CAAkBR,OAAQP,EAAKO,SAC/B,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAMW,eAAe,YAAYC,UAAQ,EAAC/B,MAAO,GAC/C,gBAAC,IAAD,CAAKgC,MAAM,MACX,gBAAC,IAAD,CAAKA,MAAM,QAEb,2BACGd,aADH,EACGA,EAAUrB,KAAKmB,GAAaK,KAAI,SAACD,GAAD,OAC/B,gBAAC,IAAD,CAAgBO,IAAKP,EAAQf,KAAMe,QAASA,SAIlD,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAqBa,MAAM,iBAAiBC,QAAO,UAAEtB,EAAKO,cAAP,aAAE,EAAagB,kBAEpE,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAgBC,QAAQ,SAASvB,YAAaA,MAGlDE,EAAO,gBAAC,IAAD,CAAmBY,IAAKZ,EAAKa,KAAMC,KAAMd,IAAW,MAC3DS,QAAO,SAACa,GAAD,OAAqCC,QAAQD,MAEtD,OACE,gBAAC,IAAD,CAAQJ,MAAK,UAAErB,EAAKO,cAAP,aAAE,EAAaS,KAAMW,eAAgB,gBAAC,IAAD,CAAkB1B,YAAaA,EAAauB,QAAQ,YACpG,gBAAC5B,EAAD,CAA4BgC,MAAOvB,EAAcwB,cA7C3B,SAACD,GACrBA,IAAUvB,IACVF,GAAQyB,IAAUvB,EAAe,GACnCyB,mBAAS,WAAW3B,EAAKa,MAEvBd,GAAY0B,IAAUvB,EAAe,GACvCyB,mBAAS,YAAW5B,aAAZ,EAAYA,EAAUc,SAuCqDe,YAAU,GAC1FjB,GAEH,gBAAC,IAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD","file":"component---src-templates-artist-tsx-abaa4b254f96d60adf2a.js","sourcesContent":["import * as React from 'react';\nimport { useAppState } from '../gatsby-theme-aoi-top-layout/utils/AppStateContext';\nimport { Maybe, Program, ProgramPlaylist } from '../../graphql-types';\n\n/** usage\n * const sorter = useSorter();\n * programs.sort((a, b) => sorter(a.week - b.week))\n */\nexport default function useSorter() {\n  const { sort } = useAppState();\n  return React.useCallback((value: number) => (sort === 'older' ? value : -value), [sort]);\n}\n\nexport function useSortProgram() {\n  const sorter = useSorter();\n  return (a: Maybe<Pick<Program, 'week'>> | undefined, b: Maybe<Pick<Program, 'week'>> | undefined) =>\n    sorter((a?.week ?? 0) - (b?.week ?? 0));\n}\n\nexport function useSortProgramNode() {\n  const sorter = useSorter();\n  return (a: { node: Maybe<Pick<Program, 'week'>> }, b: { node: Maybe<Pick<Program, 'week'>> }) =>\n    sorter((a?.node?.week ?? 0) - (b?.node?.week ?? 0));\n}\n\nexport function useSortPlaylist() {\n  const sorter = useSorter();\n  return (\n    a: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined,\n    b: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined\n  ) => sorter((a?.week ?? 0) - (b?.week ?? 0) || (a?.indexInWeek ?? 0) - (b?.indexInWeek ?? 0));\n}\n","import * as React from 'react';\nimport { graphql, navigate } from 'gatsby';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from '../layout/';\nimport Section, { SectionDivider } from '../components/Section';\nimport { ArtistPageHeader } from '../components/PageHeader';\nimport TunesByProgram from '../components/TunesByProgram';\nimport ArtistItemContainer from '../components/ArtistItemContainer';\nimport PageNavigation from '../components/PageNavigation';\nimport DrawerNavigation from '../components/DrawerNavigation';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\nimport { ArtistTonarinoTab } from '../components/TonarinoTab';\nimport { useSortProgram } from '../utils/useSorter';\nimport { ArtistTemplateQuery, SitePageContext } from '../../graphql-types';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\ninterface Props {\n  data: ArtistTemplateQuery;\n  pageContext: SitePageContext;\n}\n\nfunction ArtistTemplate({ data, pageContext }: Props) {\n  const { previous, next } = pageContext;\n  const sortProgram = useSortProgram();\n  const initialIndex = previous ? 1 : 0;\n  const handleChangeIndex = (index: number) => {\n    if (index === initialIndex) return;\n    if (next && index === initialIndex + 1) {\n      navigate(`/artist/${next.name}`);\n    }\n    if (previous && index === initialIndex - 1) {\n      navigate(`/artist/${previous?.name}`);\n    }\n  };\n  const programs = data.artist?.program?.map((program) => ({\n    ...program,\n    playlist: data.artist?.tunes?.filter((tune) => tune?.week === program?.week),\n  }));\n  const tabs = [\n    previous ? <ArtistTonarinoTab key={previous?.name} item={previous} /> : null,\n    <div key=\"main\">\n      <ArtistPageHeader artist={data.artist} />\n      <SectionDivider />\n      <Section>\n        <Tabs indicatorColor=\"secondary\" centered value={0}>\n          <Tab label=\"曲\" />\n          <Tab label=\"詳細\" />\n        </Tabs>\n        <div>\n          {programs?.sort(sortProgram).map((program) => (\n            <TunesByProgram key={program.week} program={program} />\n          ))}\n        </div>\n      </Section>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <ArtistItemContainer title=\"同じ回で登場したアーティスト\" artists={data.artist?.relatedArtists} />\n      </Section>\n      <SectionDivider />\n      <Section>\n        <PageNavigation variant=\"artist\" pageContext={pageContext} />\n      </Section>\n    </div>,\n    next ? <ArtistTonarinoTab key={next.name} item={next} /> : null,\n  ].filter((element): element is JSX.Element => Boolean(element));\n\n  return (\n    <Layout title={data.artist?.name} drawerContents={<DrawerNavigation pageContext={pageContext} variant=\"artist\" />}>\n      <BindKeyboardSwipeableViews index={initialIndex} onChangeIndex={handleChangeIndex} resistance>\n        {tabs}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n}\n\nexport default ArtistTemplate;\n\nexport const query = graphql`\n  query ArtistTemplate($name: String!) {\n    artist(name: { eq: $name }) {\n      tunesCount\n      programCount\n      image\n      kana\n      name\n      nation\n      program {\n        id\n        date(formatString: \"YYYY-MM-DD\")\n        week\n        title\n        subtitle\n        fields {\n          slug\n        }\n      }\n      tunes {\n        corner\n        id\n        indexInWeek\n        artist {\n          name\n        }\n        kana\n        label\n        nation\n        selector\n        title\n        week\n        year\n        youtube\n      }\n      relatedArtists {\n        name\n        image\n        tunesCount\n        programCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}