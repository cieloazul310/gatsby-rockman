{"version":3,"sources":["webpack:///./src/templates/program.tsx","webpack:///./src/utils/removeMultiple.ts"],"names":["ProgramTemplate","arr","getVal","vals","set","data","pageContext","artists","program","playlist","map","tune","artist","item","name","Set","Array","from","val","indexOf","title","disableGutters","jumbotron","drawerContents","DrawerNavigation","variant","Section","Tabs","indicatorColor","centered","value","Tab","label","Tune","key","id","ArtistItemContainer","PageNavigation"],"mappings":"iOAqLeA,UAvIf,YAAuD,YC9CrBC,EAAUC,EACpCC,EACAC,ED4CmBC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YAEzBC,EAAU,UAAAF,EAAKG,eAAL,SAAcC,UChDER,EDkD1BI,EAAKG,QAAQC,SAASC,KAAI,SAACC,GAAD,OAAUA,aAAV,EAAUA,EAAMC,UClDNV,EDmDpC,SAACW,GAAD,OAAUA,aAAV,EAAUA,EAAMC,MClDhBX,EAAOF,EAAIS,IAAIR,GACfE,EAAM,IAAIW,IAAIZ,GACba,MAAMC,KAAKb,GAAKM,KAAI,SAACQ,GAAD,OAASjB,EAAIE,EAAKgB,QAAQD,QDkDjD,GACJ,OACE,gBAAC,IAAD,CACEE,MAAK,UAAEf,EAAKG,eAAP,aAAE,EAAcY,MACrBC,gBAAc,EACdC,UAAW,gBAAC,IAAD,CAAmBd,QAASH,EAAKG,UAC5Ce,eAAgB,gBAACC,EAAA,EAAD,CAAkBlB,YAAaA,EAAamB,QAAQ,aAEpE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAMC,eAAe,YAAYC,UAAQ,EAACC,MAAO,GAC/C,gBAACC,EAAA,EAAD,CAAKC,MAAM,MACX,gBAACD,EAAA,EAAD,CAAKC,MAAM,QAEb,qCACG3B,EAAKG,eADR,iBACG,EAAcC,gBADjB,aACG,EAAwBC,KAAI,SAACC,GAAD,OAC3B,gBAACsB,EAAA,EAAD,CAAMC,IAAKvB,aAAF,EAAEA,EAAMwB,GAAIxB,KAAMA,SAIjC,gBAACe,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACU,EAAA,EAAD,CAAqBhB,MAAM,WAAWb,QAASA,KAEjD,gBAACmB,EAAA,EAAD,MACA,gBAACA,EAAA,EAAD,KACE,gBAACW,EAAA,EAAD,CAAgBZ,QAAQ,UAAUnB,YAAaA","file":"component---src-templates-program-tsx-cde2612f39301a9b0c3c.js","sourcesContent":["import * as React from 'react';\nimport { graphql, navigate } from 'gatsby';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n//import Container from '@material-ui/core/Container';\n// import Box from '@material-ui/core/Box';\n//import SwipeableViews from 'react-swipeable-views';\n// import { bindKeyboard, virtualize, SlideRenderProps } from 'react-swipeable-views-utils';\n// import List from '@material-ui/core/List';\n// import ListSubheader from '@material-ui/core/ListSubheader';\nimport Layout from '../layout/Template';\n// import ListItemLink from 'gatsby-theme-aoi/src/components/ListItemLink';\nimport Section, { SectionDivider } from '../components/Section';\nimport { ProgramPageHeader } from '../components/PageHeader';\nimport Tune from '../components/Tune';\nimport ArtistItemContainer from '../components/ArtistItemContainer';\n// import Jumbotron from '../components/Jumbotron';\n// import TuneCard, { TuneCardSkeleton } from '../components/TuneCard';\nimport PageNavigation from '../components/PageNavigation';\nimport DrawerNavigation from '../components/DrawerNavigation';\n// import NavigationBox from '../components/NavigationBox';\n// import ContentBasis from '../components/ContentBasis';\n// import ResponsiveContainer from '../components/ResponsiveContainer';\n// import { useAllPrograms, useCategories } from '../utils/graphql-hooks';\n// import createDescriptionString from '../utils/createDescriptionString';\n// import getAroundPrograms from '../utils/getAroundPrograms';\n// import { QueriedProgram } from '../types';\nimport { removeMultiple } from '../utils/removeMultiple';\nimport { ProgramTemplateQuery, SitePageContext } from '../../graphql-types';\n\n// const VirtualizedSwipeableViews = bindKeyboard(virtualize(SwipeableViews));\n/*\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    content: {\n      background: theme.palette.background.paper,\n    },\n  })\n);\n*/\ninterface Props {\n  data: ProgramTemplateQuery;\n  pageContext: SitePageContext;\n}\n\nfunction ProgramTemplate({ data, pageContext }: Props) {\n  // const classes = useStyles();\n  const artists = data.program?.playlist\n    ? removeMultiple(\n        data.program.playlist.map((tune) => tune?.artist),\n        (item) => item?.name\n      )\n    : [];\n  return (\n    <Layout\n      title={data.program?.title}\n      disableGutters\n      jumbotron={<ProgramPageHeader program={data.program} />}\n      drawerContents={<DrawerNavigation pageContext={pageContext} variant=\"program\" />}\n    >\n      <Section>\n        <Tabs indicatorColor=\"secondary\" centered value={0}>\n          <Tab label=\"曲\" />\n          <Tab label=\"詳細\" />\n        </Tabs>\n        <div>\n          {data.program?.playlist?.map((tune) => (\n            <Tune key={tune?.id} tune={tune} />\n          ))}\n        </div>\n      </Section>\n      <SectionDivider />\n      <Section>\n        <ArtistItemContainer title=\"登場アーティスト\" artists={artists} />\n      </Section>\n      <SectionDivider />\n      <Section>\n        <PageNavigation variant=\"program\" pageContext={pageContext} />\n      </Section>\n    </Layout>\n  );\n  /*\n  const { program } = data;\n  const { previous, next, index, slug } = pageContext;\n  const allPrograms = useAllPrograms();\n  const categories = useCategories((program?.categories as string[]) ?? []);\n  const description = createDescriptionString(program);\n  const [loading, setLoading] = React.useState(false);\n  const [tab, setTab] = React.useState(index);\n  const _onChangeIndex = (i: number) => {\n    setTab(i);\n  };\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      if (tab !== index) {\n        setLoading(true);\n        navigate(allPrograms[tab]?.fields?.slug ?? '#');\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [tab, index, allPrograms]);\n\n  function slideRenderer({ index, key }: SlideRenderProps) {\n    const item = allPrograms[index];\n    return (\n      <div key={key}>\n        <Jumbotron\n          title={item.title ?? 'Artist'}\n          header={`第${item.week}回 ${item.date} 全${item.playlist?.length ?? 0}曲`}\n          subtitle={item.subtitle ?? undefined}\n          artists={Array.from(new Set(item.playlist?.map((d) => d?.artist ?? '')))}\n          imgUrl={item.fields?.image ?? undefined}\n        />\n        <ResponsiveContainer maxWidth=\"md\">\n          <Box pt={4}>\n            {item.fields?.slug === slug ? (\n              <div>\n                {program?.playlist?.map((tune, index) => (tune ? <TuneCard key={tune.id ?? index} tune={tune} /> : null))}\n                <ContentBasis>\n                  <PageNavigation {...createNavigationProps(previous, next)} />\n                </ContentBasis>\n                <ContentBasis>\n                  {categories.map((category, index) => (\n                    <List key={index} subheader={<ListSubheader>{category.fieldValue}</ListSubheader>}>\n                      {getAroundPrograms(category.edges, program?.id ?? 'dummy').map((v) => (\n                        <ListItemLink\n                          key={v.node.id}\n                          selected={v.node.id === program?.id}\n                          to={v.node.fields?.slug ?? '#'}\n                          primaryText={v.node.title ?? 'Program'}\n                          secondaryText={`第${v.node.week}回 ${v.node.date}`}\n                          divider\n                          dense\n                        />\n                      ))}\n                    </List>\n                  ))}\n                </ContentBasis>\n                <ContentBasis>\n                  <NavigationBox />\n                </ContentBasis>\n              </div>\n            ) : (\n              <div>\n                <TuneCardSkeleton />\n                <TuneCardSkeleton />\n                <TuneCardSkeleton />\n              </div>\n            )}\n          </Box>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n\n  return (\n    <Layout\n      title={program?.title ?? '放送回'}\n      description={description}\n      disableGutters\n      disablePaddingTop\n      maxWidth={false}\n      loading={loading}\n      componentViewports={{ BottomNav: false }}\n      drawerContents={<DrawerNavigation {...createNavigationProps(previous, next)} />}\n    >\n      <VirtualizedSwipeableViews\n        index={tab}\n        onChangeIndex={_onChangeIndex}\n        slideRenderer={slideRenderer}\n        slideCount={allPrograms.length}\n        resistance\n      />\n    </Layout>\n  );\n  */\n}\n\nexport default ProgramTemplate;\n/*\nfunction createNavigationProps(previous: QueriedProgram, next: QueriedProgram) {\n  return {\n    previous: previous ? { to: previous.fields?.slug ?? '#', title: previous.title } : null,\n\n    next: next ? { to: next.fields?.slug ?? '#', title: next.title } : null,\n  };\n}\n*/\nexport const query = graphql`\n  query ProgramTemplate($slug: String!) {\n    program(fields: { slug: { eq: $slug } }) {\n      id\n      date(formatString: \"YYYY-MM-DD\")\n      subtitle\n      title\n      week\n      year\n      guests\n      categories\n      fields {\n        image\n      }\n      playlist {\n        artist {\n          name\n          image\n          programCount\n          tunesCount\n        }\n        corner\n        id\n        index\n        indexInWeek\n        label\n        kana\n        nation\n        selector\n        title\n        year\n        week\n        youtube\n      }\n    }\n  }\n`;\n","export function removeMultiple<T>(arr: T[], getVal: (item: T) => unknown): T[] {\n  const vals = arr.map(getVal);\n  const set = new Set(vals);\n  return Array.from(set).map((val) => arr[vals.indexOf(val)]);\n}\n"],"sourceRoot":""}