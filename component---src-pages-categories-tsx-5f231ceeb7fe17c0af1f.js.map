{"version":3,"sources":["webpack:///./src/pages/categories.tsx","webpack:///./src/utils/useSorter.tsx","webpack:///./node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","webpack:///./src/components/ListItemAppLink.tsx","webpack:///./src/components/ProgramItem.tsx"],"names":["BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","CategoriesPage","data","categories","React","allProgram","group","sort","a","b","totalCount","titles","map","fieldValue","initialTab","useParseHash","state","category","undefined","tab","setTab","sortProgramNode","useSortProgramNode","onItemClicked","index","useHash","window","scrollTo","title","tabs","value","onChange","event","newValue","variant","scrollButtons","aria-label","label","d","key","edges","length","onChangeIndex","resistance","animateHeight","disableGutters","button","onClick","primary","component","footer","i","node","id","program","last","useSorter","useAppState","useSortProgram","sorter","week","ListItemAvatar","props","ref","classes","className","other","context","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","marginTop","name","ListItemLink","color","inset","to","primaryText","secondaryText","avatar","secondaryAction","textClasses","useMediaQuery","theme","breakpoints","down","ListItem","GatsbyLink","ListItemText","secondary","ListItemSecondaryAction","AppLink","useStyles","makeStyles","createStyles","paddingLeft","spacing","ProgramItem","useAvatarStyles","Avatar","src","fields","image","slug","date","divider"],"mappings":"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","file":"component---src-pages-categories-tsx-5f231ceeb7fe17c0af1f.js","sourcesContent":["import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport Typography from '@material-ui/core/Typography';\nimport Tabs from '@material-ui/core/Tabs';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from '../layout/TabLayout';\nimport TabPane from '../layout/TabPane';\nimport Tab from '../components/MuiTab';\nimport Section, { SectionDivider } from '../components/Section';\nimport Article, { Paragraph } from '../components/Article';\nimport ProgramItem from '../components/ProgramItem';\nimport Jumbotron from '../components/Jumbotron';\nimport NavigationBox from '../components/NavigationBox';\nimport { AdInArticle } from '../components/Ads';\nimport { useSortProgramNode } from '../utils/useSorter';\nimport { useParseHash, useHash } from '../utils/useHash';\nimport { CategoriesPageQuery } from '../../graphql-types';\n\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\ninterface WindowState {\n  category?: string;\n}\n\nfunction CategoriesPage({ data }: PageProps<CategoriesPageQuery, WindowState>) {\n  const categories = React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.totalCount - a.totalCount);\n  }, [data]);\n  const titles = React.useMemo(() => ['', ...categories.map(({ fieldValue }) => fieldValue ?? '')], [categories]);\n  const initialTab = useParseHash<WindowState>(titles, (state) => state?.category ?? undefined);\n  const [tab, setTab] = React.useState(initialTab);\n\n  const sortProgramNode = useSortProgramNode();\n  const handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setTab(newValue);\n  };\n  const handleChangeIndex = (index: number) => {\n    setTab(index);\n  };\n  const onItemClicked = (index: number) => () => {\n    setTab(index);\n  };\n\n  useHash(tab, titles);\n  React.useEffect(() => {\n    if (typeof window === 'object') {\n      window.scrollTo(0, 0);\n    }\n  }, [tab]);\n\n  return (\n    <Layout\n      title=\"テーマ\"\n      tabs={\n        <Tabs value={tab} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          <Tab label=\"概要\" />\n          {categories.map((d, index) => (\n            <Tab key={d.fieldValue ?? index} label={`${d.fieldValue} ${d.edges.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={tab} onChangeIndex={handleChangeIndex} resistance animateHeight={typeof window === 'object'}>\n        <TabPane value={tab} index={0} disableGutters>\n          <Jumbotron title=\"テーマ\" />\n          <SectionDivider />\n          <Section>\n            <Article>\n              <Paragraph>\n                ロック大陸漫遊記の放送回を「アーティスト特集」「スピッツメンバーと漫遊記」など特定のテーマで分類したページです。\n              </Paragraph>\n              <List>\n                {categories.map((category, index) => (\n                  <ListItem key={index} button onClick={onItemClicked(index + 1)}>\n                    <ListItemText primary={category.fieldValue} />\n                    <Typography variant=\"button\" component=\"span\">\n                      {category.edges.length}回\n                    </Typography>\n                  </ListItem>\n                ))}\n              </List>\n            </Article>\n          </Section>\n        </TabPane>\n        {categories.map((d, index) => (\n          <TabPane key={index} value={tab} index={index + 1} disableGutters>\n            <Jumbotron title={d.fieldValue} footer={`全${d.edges.length}回`} />\n            <SectionDivider />\n            <Section>\n              <List>\n                {d.edges.sort(sortProgramNode).map(({ node }, i) => (\n                  <ProgramItem key={node.id} program={node} last={i === d.edges.length - 1} />\n                ))}\n              </List>\n            </Section>\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n      <SectionDivider />\n      <AdInArticle />\n      <SectionDivider />\n      <Section>\n        <NavigationBox />\n      </Section>\n    </Layout>\n  );\n}\n\nexport default CategoriesPage;\n\nexport const query = graphql`\n  query CategoriesPage {\n    allProgram(sort: { fields: week, order: ASC }, filter: { categories: { ne: \"\" } }) {\n      group(field: categories) {\n        totalCount\n        fieldValue\n        edges {\n          node {\n            id\n            week\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            fields {\n              slug\n              image\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport { useAppState } from '../gatsby-theme-aoi-top-layout/utils/AppStateContext';\nimport { Maybe, Program, ProgramPlaylist } from '../../graphql-types';\n\n/** usage\n * const sorter = useSorter();\n * programs.sort((a, b) => sorter(a.week - b.week))\n */\nexport default function useSorter() {\n  const { sort } = useAppState();\n  return React.useCallback((value: number) => (sort === 'older' ? value : -value), [sort]);\n}\n\nexport function useSortProgram() {\n  const sorter = useSorter();\n  return (a: Maybe<Pick<Program, 'week'>> | undefined, b: Maybe<Pick<Program, 'week'>> | undefined) =>\n    sorter((a?.week ?? 0) - (b?.week ?? 0));\n}\n\nexport function useSortProgramNode() {\n  const sorter = useSorter();\n  return (a: { node: Maybe<Pick<Program, 'week'>> }, b: { node: Maybe<Pick<Program, 'week'>> }) =>\n    sorter((a?.node?.week ?? 0) - (b?.node?.week ?? 0));\n}\n\nexport function useSortPlaylist() {\n  const sorter = useSorter();\n  return (\n    a: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined,\n    b: Maybe<Pick<ProgramPlaylist, 'week' | 'indexInWeek'>> | undefined\n  ) => sorter((a?.week ?? 0) - (b?.week ?? 0) || (a?.indexInWeek ?? 0) - (b?.indexInWeek ?? 0));\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import * as React from 'react';\nimport { Link as GatsbyLink, GatsbyLinkProps } from 'gatsby';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemText, { ListItemTextProps } from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { LinkProps as MuiLinkProps } from '@material-ui/core/Link';\nimport { Theme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\n\ntype ListItemLinkProps<T = Record<string, unknown>> = Omit<ListItemProps, 'ref'> &\n  Pick<MuiLinkProps, 'color'> & {\n    to: string;\n    primaryText: string;\n    secondaryText?: string;\n    inset?: boolean;\n    avatar?: JSX.Element;\n    secondaryAction?: JSX.Element;\n    textClasses?: ListItemTextProps['classes'];\n  } & Omit<GatsbyLinkProps<T>, 'ref' | 'button'>;\n\nfunction ListItemLink({\n  color = 'inherit',\n  button = false,\n  inset = false,\n  to,\n  primaryText,\n  secondaryText,\n  avatar,\n  secondaryAction,\n  textClasses,\n  ...props\n}: ListItemLinkProps) {\n  const isMobile = useMediaQuery((theme: Theme) => theme.breakpoints.down('xs'));\n\n  return isMobile || button ? (\n    <ListItem component={GatsbyLink} to={to} button {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText classes={textClasses} primary={primaryText} secondary={secondaryText} inset={inset} />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  ) : (\n    <ListItem {...props}>\n      {avatar ? <ListItemAvatar>{avatar}</ListItemAvatar> : null}\n      <ListItemText\n        classes={textClasses}\n        inset={inset}\n        primary={\n          <AppLink to={to} color={color}>\n            {primaryText}\n          </AppLink>\n        }\n        secondary={secondaryText || null}\n      />\n      {secondaryAction ? <ListItemSecondaryAction>{secondaryAction}</ListItemSecondaryAction> : null}\n    </ListItem>\n  );\n}\nexport default ListItemLink;\n","import * as React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport ListItemLink from './ListItemAppLink';\nimport { useAvatarStyles } from '../styles';\nimport { Maybe, Program } from '../../graphql-types';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    inset: {\n      paddingLeft: theme.spacing(2),\n    },\n  })\n);\n\ninterface Props {\n  program: Maybe<Pick<Program, 'fields' | 'title' | 'week' | 'date'>>;\n  last?: boolean;\n}\n\nfunction ProgramItem({ program, last }: Props) {\n  const classes = useAvatarStyles();\n  const textClasses = useStyles();\n  return (\n    <ListItemLink\n      avatar={<Avatar className={classes.avatar} src={program?.fields?.image ?? undefined} variant=\"square\" />}\n      to={program?.fields?.slug ?? '#'}\n      primaryText={program?.title ?? 'タイトル'}\n      secondaryText={`第${program?.week}回 ${program?.date}`}\n      divider={!last}\n      inset\n      textClasses={textClasses}\n    />\n  );\n}\n\nexport default ProgramItem;\n"],"sourceRoot":""}