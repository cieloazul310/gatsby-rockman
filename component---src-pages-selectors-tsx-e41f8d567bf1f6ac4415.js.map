{"version":3,"sources":["webpack:///./src/components/TunesByProgram.tsx","webpack:///./src/components/LazyViewer.tsx","webpack:///./src/utils/useDividedArray.tsx","webpack:///./src/pages/selectors.tsx"],"names":["TunesByProgram","program","filter","Box","py","Typography","variant","component","week","date","gutterBottom","AppLink","to","fields","slug","title","playlist","map","tune","index","TuneCard","key","id","DummyItem","DisplayOnScreen","children","margin","once","useInView","rootMargin","triggerOnce","ref","inView","LazyViewer","programs","divisor","dividedItems","sorter","useSorter","React","sort","a","b","reduce","accum","curr","filtered","length","getPlaylistLength","push","useDividedPrograms","renderItems","d","i","v","BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","SelectorsPage","useLocation","hash","state","selectors","useAllSelectors","initialSelector","decodeURI","slice","fieldValues","fieldValue","initialValue","indexOf","selector","value","setValue","window","history","replaceState","tabSticky","componentViewports","BottomNav","tabs","onChange","event","newValue","scrollButtons","aria-label","label","onChangeIndex","resistance","edges","node","maxWidth"],"mappings":"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","file":"component---src-pages-selectors-tsx-e41f8d567bf1f6ac4415.js","sourcesContent":["import * as React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport AppLink from 'gatsby-theme-aoi/src/components/AppLink';\nimport TuneCard from './TuneCard';\nimport { Program, ProgramPlaylist } from '../../graphql-types';\n\ninterface Props {\n  program: Pick<Program, 'week' | 'date' | 'fields' | 'title' | 'playlist'>;\n  filter?: (tune?: ProgramPlaylist) => boolean;\n}\n\nfunction TunesByProgram({ program, filter = () => true }: Props) {\n  return (\n    <Box py={2}>\n      <Typography variant=\"subtitle2\" component=\"span\">\n        第{program.week}回 {program.date}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h3\" gutterBottom>\n        <AppLink to={program.fields?.slug ?? '#'}>{program.title}</AppLink>\n      </Typography>\n      {program?.playlist?.filter(filter).map((tune, index) => <TuneCard key={tune?.id ?? index} tune={tune} />) ?? null}\n    </Box>\n  );\n}\n\nexport default TunesByProgram;\n","import * as React from 'react';\nimport Box from '@material-ui/core/Box';\nimport { useInView } from 'react-intersection-observer';\nimport TunesByProgram from './TunesByProgram';\nimport { TuneCardSkeleton } from './TuneCard';\nimport { useDividedPrograms } from '../utils/useDividedArray';\nimport { QueriedProgram } from '../types';\nimport { ProgramPlaylist } from '../../graphql-types';\n\nfunction DummyItem() {\n  return (\n    <Box py={4}>\n      <TuneCardSkeleton />\n    </Box>\n  );\n}\n\ninterface DisplayOnScreenProps {\n  children: JSX.Element | JSX.Element[];\n  margin?: number;\n  once?: boolean;\n}\n\nfunction DisplayOnScreen({ children, margin = 0, once = true }: DisplayOnScreenProps) {\n  const [ref, inView] = useInView({\n    rootMargin: `${margin}px`,\n    triggerOnce: once,\n  });\n\n  return <div ref={ref}>{inView ? children : <DummyItem />}</div>;\n}\n\ninterface Props {\n  programs: QueriedProgram[];\n  divisor?: number;\n  filter?: (tune: ProgramPlaylist) => boolean;\n}\n\nfunction LazyViewer({ programs, filter = () => true, divisor = 15 }: Props) {\n  const dividedItems = useDividedPrograms(programs, divisor, filter);\n  const renderItems = React.useMemo(() => {\n    return dividedItems.map((d, i) =>\n      i === 0 ? (\n        <div key={i}>\n          {d.map((v) => (\n            <TunesByProgram program={v} key={v.id} />\n          ))}\n        </div>\n      ) : (\n        <DisplayOnScreen key={i} margin={40}>\n          {d.map((v) => (\n            <TunesByProgram program={v} key={v.id} />\n          ))}\n        </DisplayOnScreen>\n      )\n    );\n  }, [dividedItems]);\n  return <div>{renderItems}</div>;\n}\n\nexport default LazyViewer;\n","import * as React from 'react';\nimport useSorter from './useSorter';\nimport { AbstractProgram } from '../types';\nimport { ProgramPlaylist } from '../../graphql-types';\n\nexport default function useDividedArray<T>(items: T[], divisor: number) {\n  return React.useMemo(() => {\n    if (items.length <= divisor) {\n      return [items];\n    } else {\n      // ex. length = 105, divisor = 20, result = 6\n      const result = Math.ceil(items.length / divisor);\n      return Array.from({ length: result }, (d, i) => {\n        return items.slice(i * divisor, (i + 1) * divisor);\n      });\n    }\n  }, [items, divisor]);\n}\n\nexport function useDividedPrograms(\n  programs: AbstractProgram[],\n  divisor: number,\n  filter: (tune: ProgramPlaylist) => boolean = () => true\n): AbstractProgram[][] {\n  const sorter = useSorter();\n  return React.useMemo(() => {\n    return programs\n      .sort((a, b) => sorter(a.week && b.week ? a.week - b.week : 0))\n      .reduce<AbstractProgram[][]>((accum, curr, index) => {\n        const filtered = {\n          ...curr,\n          playlist: curr.playlist?.filter(filter) ?? [],\n        };\n        if (index === 0) {\n          return [[filtered]];\n        }\n        if (getPlaylistLength(accum[accum.length - 1]) < divisor) {\n          accum[accum.length - 1].push(filtered);\n          return accum;\n        } else {\n          return [...accum, [filtered]];\n        }\n      }, []);\n  }, [programs, divisor, filter, sorter]);\n}\n\nfunction getPlaylistLength(programs: AbstractProgram[]) {\n  return programs.reduce((accum, curr) => (curr.playlist ? accum + curr.playlist.length : accum), 0);\n}\n","import * as React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { useLocation, WindowLocation } from '@reach/router';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from 'gatsby-theme-aoi/src/layouts/TabPageLayout';\nimport TabPane from 'gatsby-theme-aoi/src/layout/TabPane';\nimport ContentBasis from '../components/ContentBasis';\nimport NavigationBox from '../components/NavigationBox';\nimport LazyViewer from '../components/LazyViewer';\nimport { useAllSelectors } from '../utils/graphql-hooks/useAllSelectors';\n\ntype LocationWithState = WindowLocation & {\n  state?: {\n    selector?: string;\n  };\n};\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\nfunction SelectorsPage() {\n  const { hash, state } = useLocation() as LocationWithState;\n  // [[name, programs]]\n  const selectors = useAllSelectors();\n  const initialSelector = hash !== '' ? decodeURI(hash.slice(1)) : null;\n  const fieldValues = selectors.map(({ fieldValue }) => fieldValue);\n  const initialValue =\n    fieldValues.indexOf(initialSelector) >= 0\n      ? fieldValues.indexOf(initialSelector)\n      : state?.selector\n      ? fieldValues.indexOf(state?.selector)\n      : 0;\n  const [value, setValue] = React.useState(initialValue);\n  const _handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setValue(newValue);\n  };\n  const _handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n  React.useEffect(() => {\n    if (window && typeof window === 'object') window.history.replaceState(value, '', `#${selectors[value].fieldValue}`);\n  }, [value, selectors]);\n\n  return (\n    <Layout\n      title={`${selectors[value].fieldValue}の選曲`}\n      tabSticky\n      componentViewports={{ BottomNav: false }}\n      tabs={\n        <Tabs value={value} onChange={_handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          {selectors.map((d) => (\n            <Tab key={d.fieldValue} label={`${d.fieldValue} ${d.playlist.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={value} onChangeIndex={_handleChangeIndex} resistance>\n        {selectors.map((d, index) => (\n          <TabPane key={index} value={value} index={index}>\n            <LazyViewer programs={d.edges.map((v) => v.node)} divisor={15} filter={(tune) => tune.selector === d.fieldValue} />\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n      <Container maxWidth=\"md\">\n        <ContentBasis>\n          <NavigationBox />\n        </ContentBasis>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default SelectorsPage;\n"],"sourceRoot":""}