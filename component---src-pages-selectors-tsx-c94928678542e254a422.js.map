{"version":3,"sources":["webpack:///./src/pages/selectors.tsx"],"names":["BindKeyboardSwipeableViews","bindKeyboard","SwipeableViews","SelectorsPage","location","useLocation","selectors","useAllSelectors","initialSelector","hash","decodeURI","slice","initialValue","map","d","fieldValue","indexOf","state","selector","React","value","setValue","window","history","replaceState","title","tabSticky","componentViewports","BottomNav","tabs","onChange","event","newValue","variant","scrollButtons","aria-label","key","label","playlist","length","index","onChangeIndex","resistance","programs","edges","v","node","divisor","filter","tune","maxWidth"],"mappings":"4FAAA,gLAmBMA,EAA6BC,uBAAaC,KAqDjCC,UAnDf,WACE,IAAMC,EAAWC,wBAEXC,EAAYC,cACZC,EAAoC,KAAlBJ,EAASK,KAAcC,UAAUN,EAASK,KAAKE,MAAM,IAAM,KAC7EC,EACJN,EAAUO,KAAI,SAACC,GAAD,OAAOA,EAAEC,cAAYC,QAAQR,UAAmB,KAAO,EACjEF,EAAUO,KAAI,SAACC,GAAD,OAAOA,EAAEC,cAAYC,QAAQR,UAAmB,IAC9DJ,EAASa,OAASb,EAASa,MAAMC,SACjCZ,EAAUO,KAAI,SAACC,GAAD,OAAOA,EAAEC,cAAYC,QAAQZ,EAASa,MAAMC,UAC1D,EAViB,EAWGC,WAAeP,GAAlCQ,EAXgB,KAWTC,EAXS,KAsBvB,OAJAF,aAAgB,WACVG,QAAQA,OAAOC,QAAQC,aAAaJ,EAAO,GAAnC,IAA2Cd,EAAUc,GAAOL,cACvE,CAACK,EAAOd,IAGT,gBAAC,IAAD,CACEmB,MAAUnB,EAAUc,GAAOL,WAAtB,MACLW,WAAS,EACTC,mBAAoB,CAAEC,WAAW,GACjCC,KACE,gBAAC,IAAD,CAAMT,MAAOA,EAAOU,SAhBJ,SAACC,EAAmDC,GACxEX,EAASW,IAewCC,QAAQ,aAAaC,cAAc,OAAOC,aAAW,gCAC/F7B,EAAUO,KAAI,SAACC,GAAD,OACb,gBAAC,IAAD,CAAKsB,IAAKtB,EAAEC,WAAYsB,MAAUvB,EAAEC,WAAP,IAAqBD,EAAEwB,SAASC,cAKnE,gBAACvC,EAAD,CAA4BwC,MAAOpB,EAAOqB,cApBnB,SAACD,GAC1BnB,EAASmB,IAmBsEE,YAAU,GACpFpC,EAAUO,KAAI,SAACC,EAAG0B,GAAJ,OACb,gBAAC,IAAD,CAASJ,IAAKI,EAAOpB,MAAOA,EAAOoB,MAAOA,GACxC,gBAAC,IAAD,CAAYG,SAAU7B,EAAE8B,MAAM/B,KAAI,SAACgC,GAAD,OAAOA,EAAEC,QAAOC,QAAS,GAAIC,OAAQ,SAACC,GAAD,OAAUA,EAAK/B,WAAaJ,EAAEC,mBAI3G,gBAAC,IAAD,CAAWmC,SAAS,MAClB,gBAAC,IAAD,KACE,gBAAC,IAAD","file":"component---src-pages-selectors-tsx-c94928678542e254a422.js","sourcesContent":["import * as React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { useLocation, WindowLocation } from '@reach/router';\nimport SwipeableViews from 'react-swipeable-views';\nimport { bindKeyboard } from 'react-swipeable-views-utils';\nimport Layout from 'gatsby-theme-aoi/src/layouts/TabPageLayout';\nimport TabPane from 'gatsby-theme-aoi/src/layout/TabPane';\nimport ContentBasis from '../components/ContentBasis';\nimport NavigationBox from '../components/NavigationBox';\nimport LazyViewer from '../components/LazyViewer';\nimport { useAllSelectors } from '../utils/graphql-hooks/useAllSelectors';\n\ntype LocationWithState = WindowLocation & {\n  state?: {\n    selector?: string;\n  };\n};\nconst BindKeyboardSwipeableViews = bindKeyboard(SwipeableViews);\n\nfunction SelectorsPage() {\n  const location = useLocation() as LocationWithState;\n  // [[name, programs]]\n  const selectors = useAllSelectors();\n  const initialSelector = location.hash !== '' ? decodeURI(location.hash.slice(1)) : null;\n  const initialValue =\n    selectors.map((d) => d.fieldValue).indexOf(initialSelector ?? '') >= 0\n      ? selectors.map((d) => d.fieldValue).indexOf(initialSelector ?? '')\n      : location.state && location.state.selector\n      ? selectors.map((d) => d.fieldValue).indexOf(location.state.selector)\n      : 0;\n  const [value, setValue] = React.useState(initialValue);\n  const _handleChange = (event: React.ChangeEvent<Record<string, unknown>>, newValue: number) => {\n    setValue(newValue);\n  };\n  const _handleChangeIndex = (index: number) => {\n    setValue(index);\n  };\n  React.useEffect(() => {\n    if (window) window.history.replaceState(value, '', `#${selectors[value].fieldValue}`);\n  }, [value, selectors]);\n\n  return (\n    <Layout\n      title={`${selectors[value].fieldValue}の選曲`}\n      tabSticky\n      componentViewports={{ BottomNav: false }}\n      tabs={\n        <Tabs value={value} onChange={_handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\">\n          {selectors.map((d) => (\n            <Tab key={d.fieldValue} label={`${d.fieldValue} ${d.playlist.length}`} />\n          ))}\n        </Tabs>\n      }\n    >\n      <BindKeyboardSwipeableViews index={value} onChangeIndex={_handleChangeIndex} resistance>\n        {selectors.map((d, index) => (\n          <TabPane key={index} value={value} index={index}>\n            <LazyViewer programs={d.edges.map((v) => v.node)} divisor={15} filter={(tune) => tune.selector === d.fieldValue} />\n          </TabPane>\n        ))}\n      </BindKeyboardSwipeableViews>\n      <Container maxWidth=\"md\">\n        <ContentBasis>\n          <NavigationBox />\n        </ContentBasis>\n      </Container>\n    </Layout>\n  );\n}\n\nexport default SelectorsPage;\n"],"sourceRoot":""}