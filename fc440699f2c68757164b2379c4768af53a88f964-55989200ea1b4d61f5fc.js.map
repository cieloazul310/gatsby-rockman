{"version":3,"sources":["webpack:///./src/utils/sortByYomi.ts","webpack:///./src/utils/graphql-hooks/useAllPrograms.tsx","webpack:///./src/utils/graphql-hooks/useAllArtists.tsx","webpack:///./src/utils/graphql-hooks/useAllCategories.tsx","webpack:///./src/utils/graphql-hooks/useAllNations.tsx","webpack:///./src/utils/graphql-hooks/useAllYears.tsx","webpack:///./src/utils/graphql-hooks/useAllTunes.tsx"],"names":["sortArtists","artists","options","sortType","sort","a","b","edges","length","sortByEdges","sortByYomi","tunes","sortByTunes","getYomi","fieldValue","kana","localeCompare","artistName","the","slice","useAllPrograms","data","React","allProgram","map","node","img","playlist","filter","tune","index","youtube","useAllArtists","group","item","reduce","accum","curr","d","id","indexOf","removeMultiple","artist","nation","undefined","useArtists","limit","allArtists","useAllCategories","useCategories","fieldValues","categories","category","includes","useAllNations","nations","Array","from","Set","useSchemeNations","allNations","schemeNations","schemed","notSchemed","useAllYears","allTunes","year","parseInt","useDecades","years","forEach","Error","allYears","first","Math","floor","last","Date","getFullYear","_","i","decade","items","value"],"mappings":"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","file":"fc440699f2c68757164b2379c4768af53a88f964-55989200ea1b4d61f5fc.js","sourcesContent":["import { ArtistItem } from './graphql-hooks';\n\nexport type SortType = 'abc' | 'edges' | 'tunes';\n\ninterface SortArtistsOptions {\n  sortType?: SortType;\n  sortAsc?: boolean;\n}\n\nexport default function sortArtists(artists: ArtistItem[], options: SortArtistsOptions = {}) {\n  const sortType = options.sortType || 'abc';\n  return [...artists].sort((a, b) =>\n    sortType === 'edges'\n      ? sortByEdges(a, b) || sortByYomi(a, b)\n      : sortType === 'tunes'\n      ? sortByTunes(a, b) || sortByYomi(a, b)\n      : sortByYomi(a, b)\n  );\n}\n\nexport function sortByYomi(a: ArtistItem, b: ArtistItem) {\n  return getYomi(a.fieldValue, a.kana).localeCompare(getYomi(b.fieldValue, b.kana));\n}\n\nexport function sortByEdges(a: ArtistItem, b: ArtistItem) {\n  return -(a.edges.length - b.edges.length);\n}\n\nexport function sortByTunes(a: ArtistItem, b: ArtistItem) {\n  return -(a.tunes.length - b.tunes.length);\n}\n\nexport function getYomi(artistName: string, kana?: string) {\n  const the = artistName.slice(0, 4);\n  if (the === 'The ' || the === 'THE ' || the === 'the ') return artistName.slice(4);\n  return kana || artistName;\n}\n\nexport function encodeArtistName(artistName: string) {\n  return encodeURIComponent(artistName.replace(/[' ']+/g, '_'));\n}\n\nexport function decodeArtistName(artistName: string) {\n  return decodeURIComponent(artistName.replace(/['_']+/g, ' '));\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllProgramQuery } from '../../../graphql-types';\n\nexport type ProgramEdge = AllProgramQuery['allProgram']['edges'][number];\n\nexport function useAllPrograms() {\n  const data = useStaticQuery<AllProgramQuery>(graphql`\n    query AllProgram {\n      allProgram(sort: { fields: week, order: ASC }) {\n        edges {\n          node {\n            id\n            title\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            fields {\n              slug\n            }\n            guests\n            playlist {\n              artist\n              corner\n              id\n              indexInWeek\n              index\n              kana\n              label\n              nation\n              producer\n              selector\n              title\n              week\n              year\n              youtube\n            }\n            subtitle\n            week\n            year\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.edges.map(({ node }) => {\n      const [img] =\n        node.playlist?.filter((tune, index) => index !== 0 && tune?.youtube && tune.youtube !== '').map((tune) => tune?.youtube) ?? [];\n      return {\n        ...node,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : null,\n      };\n    });\n  }, [data.allProgram.edges]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport sortArtists, { SortType } from '../sortByYomi';\nimport { AllArtistsQuery } from '../../../graphql-types';\n\ntype ArtistGroup = AllArtistsQuery['allProgram']['group'][number];\ntype ArtistEdge = ArtistGroup['edges'][number];\ntype ArtistTune = NonNullable<NonNullable<ArtistEdge['node']['playlist']>[number]>;\n\nexport interface ArtistItem {\n  fieldValue: string;\n  kana?: string;\n  nation: string;\n  edges: ArtistEdge[];\n  tunes: ArtistTune[];\n  img?: string;\n}\n\nexport function useAllArtists() {\n  const data = useStaticQuery<AllArtistsQuery>(graphql`\n    query AllArtists {\n      allProgram(sort: { fields: date, order: ASC }) {\n        group(field: playlist___artist) {\n          edges {\n            node {\n              id\n              playlist {\n                artist\n                kana\n                nation\n                youtube\n              }\n            }\n          }\n          fieldValue\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.map((item) => {\n      const edges = removeMultiple(item.edges).map(({ node }) => ({\n        ...node,\n        playlist: (node?.playlist?.filter((tune) => tune?.artist === item.fieldValue) ?? []) as ArtistTune[],\n      }));\n      const tunes = edges.reduce<ArtistTune[]>((accum, curr) => (curr.playlist ? [...accum, ...curr.playlist] : accum), []);\n      const [{ kana, nation }] = tunes;\n      const [img] = tunes\n        .filter((tune) => tune?.youtube && tune.youtube !== '')\n        .map((tune) => tune?.youtube)\n        .slice(-1);\n\n      return {\n        fieldValue: item.fieldValue ?? '',\n        kana: kana ?? undefined,\n        nation: nation ?? '',\n        edges,\n        tunes,\n        img: img ? `https://i.ytimg.com/vi/${img}/0.jpg` : undefined,\n      };\n    });\n  }, [data]);\n}\n\nfunction removeMultiple(edges: ArtistEdge[]) {\n  return edges.reduce<ArtistEdge[]>((accum, curr) => {\n    if (accum.map((d) => d.node.id).indexOf(curr.node.id) >= 0) return accum;\n    return [...accum, curr];\n  }, []);\n}\n\nexport function useArtists(sortType: SortType, limit = 0) {\n  const allArtists = useAllArtists();\n  return React.useMemo(() => {\n    return sortArtists(allArtists, { sortType }).slice(0, limit || allArtists.length);\n  }, [sortType, limit, allArtists]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { AllCategoriesQuery } from '../../../graphql-types';\n\nexport function useAllCategories() {\n  const data = useStaticQuery<AllCategoriesQuery>(graphql`\n    query AllCategories {\n      allProgram(sort: { fields: week, order: ASC }) {\n        group(field: categories) {\n          fieldValue\n          edges {\n            node {\n              id\n              week\n              title\n              date(formatString: \"YYYY-MM-DD\")\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return React.useMemo(() => {\n    return data.allProgram.group.sort((a, b) => b.edges.length - a.edges.length);\n  }, [data]);\n}\n\nexport function useCategories(fieldValues: string[]) {\n  const categories = useAllCategories();\n  return React.useMemo(() => {\n    return categories.filter((category) => category.fieldValue && fieldValues.includes(category.fieldValue));\n  }, [fieldValues, categories]);\n}\n","import * as React from 'react';\nimport { useAllArtists } from './useAllArtists';\nimport { schemeNations } from '../getNationColor';\n\nexport function useAllNations() {\n  const allArtists = useAllArtists();\n  const nations = Array.from(new Set(allArtists.map((artist) => artist.nation)));\n\n  return React.useMemo(() => {\n    return nations\n      .map((nation) => ({\n        nation,\n        artists: allArtists.filter((artist) => nation === artist.nation).length,\n        tunes: allArtists.filter((artist) => nation === artist.nation).reduce((accum, curr) => accum + curr.tunes.length, 0),\n      }))\n      .sort((a, b) => b.artists - a.artists || a.nation.localeCompare(b.nation));\n  }, [nations, allArtists]);\n}\n\nexport function useSchemeNations() {\n  const allNations = useAllNations();\n  type NationItem = typeof allNations[number];\n  return React.useMemo(() => {\n    const [schemed, notSchemed] = allNations.reduce<[NationItem[], NationItem[]]>(\n      (accum, curr) => (schemeNations.includes(curr.nation) ? [[...accum[0], curr], [...accum[1]]] : [[...accum[0]], [...accum[1], curr]]),\n      [[], []]\n    );\n    return [\n      ...schemed,\n      notSchemed.reduce<NationItem>(\n        (accum, curr) => ({\n          ...accum,\n          artists: accum.artists + curr.artists,\n          tunes: accum.tunes + curr.tunes,\n        }),\n        {\n          nation: 'others',\n          artists: 0,\n          tunes: 0,\n        }\n      ),\n    ];\n  }, [allNations]);\n}\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useAllTunes } from './useAllTunes';\nimport { AllYearsQuery } from '../../../graphql-types';\n\nexport function useAllYears() {\n  const allTunes = useAllTunes();\n  const data = useStaticQuery<AllYearsQuery>(graphql`\n    query AllYears {\n      allProgram {\n        group(field: playlist___year) {\n          fieldValue\n        }\n      }\n    }\n  `);\n  return React.useMemo(\n    () =>\n      data.allProgram.group.map(({ fieldValue }) => ({\n        fieldValue: fieldValue,\n        tunes: allTunes.filter((tune) => tune?.year === parseInt(fieldValue ?? '0', 10)),\n      })),\n    [allTunes, data]\n  );\n}\n\nexport function useDecades(years: number[] = []) {\n  years.forEach((year) => {\n    if (year % 10 !== 0) throw new Error();\n  });\n  const allYears = useAllYears();\n\n  return React.useMemo(() => {\n    const first = Math.floor(parseInt(allYears[0].fieldValue ?? '1960', 10) / 10) * 10;\n    const last = Math.floor(new Date().getFullYear() / 10) * 10;\n    const decades = years.length ? years : Array.from({ length: (last - first) / 10 + 1 }, (_, i) => first + i * 10);\n    return decades.map((decade) => {\n      const items = allYears.filter(({ fieldValue }) => Math.floor(parseInt(fieldValue ?? '0', 10) / 10) === decade / 10);\n      return {\n        fieldValue: `${decade}s`,\n        value: items.reduce((accum, curr) => accum + curr.tunes.length, 0),\n        items,\n      };\n    });\n  }, [allYears, years]);\n}\n","import * as React from 'react';\nimport { useAllPrograms, ProgramEdge } from './useAllPrograms';\n\nexport function useAllTunes() {\n  const allProgram = useAllPrograms();\n  type Playlist = NonNullable<ProgramEdge['node']['playlist']>;\n  return React.useMemo(() => allProgram.reduce<Playlist>((accum, curr) => (curr.playlist ? [...accum, ...curr.playlist] : accum), []), [\n    allProgram,\n  ]);\n}\n"],"sourceRoot":""}